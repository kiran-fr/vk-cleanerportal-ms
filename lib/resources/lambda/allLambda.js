"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetWorksmanAccountRegistartionStatusLambda = exports.WorksManExperienceLambda = exports.WorksManTermsAndConditionLambda = exports.UserRegistrationLambda = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
exports.UserRegistrationLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/UserRegistration'),
        functionName: 'UserRegistration',
        handler: 'index.UserRegistrationHanlder',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.WorksManTermsAndConditionLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/WorksManTermsAndCondition'),
        functionName: 'WorksManTermsAndCondition',
        handler: 'index.WorksManTermsAndConditionHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.WorksManExperienceLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/WorksManExperience'),
        functionName: 'WorksManExperience',
        handler: 'index.WorksManExperienceHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.GetWorksmanAccountRegistartionStatusLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetWorksmanAccountRegistartionStatus'),
        functionName: 'GetWorksmanAccountRegistartionStatus',
        handler: 'index.GetWorksmanAccountRegistartionStatusHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsTGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWxsTGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFxQztBQUNyQyw4Q0FBOEM7QUFFakMsUUFBQSxzQkFBc0IsR0FBRyxHQUFHLEVBQUU7SUFDekMsT0FBTztRQUNMLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQztRQUMzRCxZQUFZLEVBQUUsa0JBQWtCO1FBQ2hDLE9BQU8sRUFBRSwrQkFBK0I7UUFDeEMsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztRQUNuQyxPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0tBQ2xDLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFWSxRQUFBLCtCQUErQixHQUFHLEdBQUcsRUFBRTtJQUNsRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHVDQUF1QyxDQUFDO1FBQ3BFLFlBQVksRUFBRSwyQkFBMkI7UUFDekMsT0FBTyxFQUFFLHdDQUF3QztRQUNqRCxVQUFVLEVBQUUsSUFBSTtRQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1FBQ25DLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7S0FDbEMsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVZLFFBQUEsd0JBQXdCLEdBQUcsR0FBRyxFQUFFO0lBQzNDLE9BQU87UUFDTCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZ0NBQWdDLENBQUM7UUFDN0QsWUFBWSxFQUFFLG9CQUFvQjtRQUNsQyxPQUFPLEVBQUUsaUNBQWlDO1FBQzFDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7UUFDbkMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztLQUNsQyxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRVksUUFBQSwwQ0FBMEMsR0FBRyxHQUFHLEVBQUU7SUFDN0QsT0FBTztRQUNMLElBQUksRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrREFBa0QsQ0FBQztRQUM5RSxZQUFZLEVBQUMsc0NBQXNDO1FBQ25ELE9BQU8sRUFBQyxtREFBbUQ7UUFDM0QsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztRQUNuQyxPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0tBQ2xDLENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XHJcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcclxuXHJcbmV4cG9ydCBjb25zdCBVc2VyUmVnaXN0cmF0aW9uTGFtYmRhID0gKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoJy4vZnVuY3Rpb25zL1VzZXJSZWdpc3RyYXRpb24nKSxcclxuICAgIGZ1bmN0aW9uTmFtZTogJ1VzZXJSZWdpc3RyYXRpb24nLFxyXG4gICAgaGFuZGxlcjogJ2luZGV4LlVzZXJSZWdpc3RyYXRpb25IYW5sZGVyJyxcclxuICAgIG1lbW9yeVNpemU6IDEwMjQsXHJcbiAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcclxuICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDE1KVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldCgnLi9mdW5jdGlvbnMvV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbicpLFxyXG4gICAgZnVuY3Rpb25OYW1lOiAnV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbicsXHJcbiAgICBoYW5kbGVyOiAnaW5kZXguV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkhhbmRsZXInLFxyXG4gICAgbWVtb3J5U2l6ZTogMTAyNCxcclxuICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xNF9YLFxyXG4gICAgdGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMTUpXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgV29ya3NNYW5FeHBlcmllbmNlTGFtYmRhID0gKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoJy4vZnVuY3Rpb25zL1dvcmtzTWFuRXhwZXJpZW5jZScpLFxyXG4gICAgZnVuY3Rpb25OYW1lOiAnV29ya3NNYW5FeHBlcmllbmNlJyxcclxuICAgIGhhbmRsZXI6ICdpbmRleC5Xb3Jrc01hbkV4cGVyaWVuY2VIYW5kbGVyJyxcclxuICAgIG1lbW9yeVNpemU6IDEwMjQsXHJcbiAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcclxuICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDE1KVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEdldFdvcmtzbWFuQWNjb3VudFJlZ2lzdGFydGlvblN0YXR1c0xhbWJkYSA9ICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgY29kZTpsYW1iZGEuQ29kZS5mcm9tQXNzZXQoJy4vZnVuY3Rpb25zL0dldFdvcmtzbWFuQWNjb3VudFJlZ2lzdGFydGlvblN0YXR1cycpLFxyXG4gICAgZnVuY3Rpb25OYW1lOidHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXMnLFxyXG4gICAgaGFuZGxlcjonaW5kZXguR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzSGFuZGxlcicsXHJcbiAgICBtZW1vcnlTaXplOiAxMDI0LFxyXG4gICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXHJcbiAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygxNSlcclxuICB9XHJcbn0iXX0=