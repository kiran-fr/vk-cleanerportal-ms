"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetDistrictWisePostCodesLambda = exports.GetPaymentHistoryDetailsLambda = exports.CreatePaymentHistoryDetailsLambda = exports.GetPaymentDetailsLambda = exports.GetJobsLambda = exports.CreateCustomerAddressLambda = exports.CreateCustomerTableLambda = exports.GetMessagesLambda = exports.CreateMessagesLambda = exports.GetBankDetailsLambda = exports.CreateBankDetailsLambda = exports.GetWorksmanjobsLambda = exports.WorksmanjobsCreateLambda = exports.GetWorksmanSchedulesLambda = exports.DeleteWorkmanScheduleLambda = exports.CreateWorksmanScheduleLambda = exports.DeletePostcodesLambda = exports.GetAllPostcodesLambda = exports.UserPostCodesLambda = exports.UpdateWorksmanDetailsLambda = exports.GetWorkmanDetailsLambda = exports.getAllMobileNumberLambda = exports.PostTestUserLambda = exports.GetTestUserLambda = exports.GetWorksmanAccountRegistartionStatusLambda = exports.WorksManExperienceLambda = exports.WorksManTermsAndConditionLambda = exports.UserRegistrationLambda = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
exports.UserRegistrationLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/UserRegistration'),
        functionName: 'UserRegistration',
        handler: 'index.UserRegistrationHanlder',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.WorksManTermsAndConditionLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/WorksManTermsAndCondition'),
        functionName: 'WorksManTermsAndCondition',
        handler: 'index.WorksManTermsAndConditionHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.WorksManExperienceLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/WorksManExperience'),
        functionName: 'WorksManExperience',
        handler: 'index.WorksManExperienceHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.GetWorksmanAccountRegistartionStatusLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetWorksmanAccountRegistartionStatus'),
        functionName: 'GetWorksmanAccountRegistartionStatus',
        handler: 'index.GetWorksmanAccountRegistartionStatusHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetTestUserLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetTestUser'),
        functionName: 'GetTestUser',
        handler: 'index.handler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.PostTestUserLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetPostTestUser'),
        functionName: 'PostTestUser',
        handler: 'index.handler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.getAllMobileNumberLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/userEmailError'),
        functionName: 'getAllMobileNumbers',
        handler: 'index.getAllMobileNumbersHanlder',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetWorkmanDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetWorksmanDetails'),
        functionName: 'GetWorkmanDetailsFun',
        handler: 'index.GetWorksmanDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.UpdateWorksmanDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/UpdateWorksmanDetails'),
        functionName: 'UpdateWorksmanDetailsFun',
        handler: 'index.UpdateWorksmanDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.UserPostCodesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/UserPostCodes'),
        functionName: 'UserPostCodesFun',
        handler: 'index.UserPostCodesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetAllPostcodesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetAllPostcodes'),
        functionName: 'GetAllPostcodesFun',
        handler: 'index.GetAllPostcodesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.DeletePostcodesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/DeletePostcodes'),
        functionName: 'DeletePostcodesFun',
        handler: 'index.DeletePostcodesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.CreateWorksmanScheduleLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/CreateWorksmanSchedule'),
        functionName: 'CreateWorksmanScheduleFun',
        handler: 'index.CreateWorksmanScheduleHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.DeleteWorkmanScheduleLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/DeleteWorkmanSchedule'),
        functionName: 'DeleteWorkmanScheduleFun',
        handler: 'index.DeleteWorkmanScheduleHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetWorksmanSchedulesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetWorksmanSchedules'),
        functionName: 'GetWorksmanSchedulesFun',
        handler: 'index.GetWorksmanSchedulesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.WorksmanjobsCreateLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/WorksmanjobsCreate'),
        functionName: 'WorksmanjobsCreateFun',
        handler: 'index.WorksmanjobsCreateHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetWorksmanjobsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetWorksmanjobs'),
        functionName: 'GetWorksmanjobsFun',
        handler: 'index.GetWorksmanjobsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.CreateBankDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/CreateBankDetails'),
        functionName: 'CreateBankDetailsFun',
        handler: 'index.CreateBankDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetBankDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetBankDetails'),
        functionName: 'GetBankDetailsFun',
        handler: 'index.GetBankDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.CreateMessagesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/CreateMessages'),
        functionName: 'CreateMessagesFun',
        handler: 'index.CreateMessagesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetMessagesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetMessages'),
        functionName: 'GetMessagesFun',
        handler: 'index.GetMessagesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.CreateCustomerTableLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/CreateCustomerTable'),
        functionName: 'CreateCustomerTableFun',
        handler: 'index.CreateCustomerTableHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.CreateCustomerAddressLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/CreateCustomerAddress'),
        functionName: 'CreateCustomerAddressFun',
        handler: 'index.CreateCustomerAddressHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetJobsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetJobsTable'),
        functionName: 'GetJobsFun',
        handler: 'index.GetJobsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetPaymentDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetPaymentDetails'),
        functionName: 'GetPaymentDetailsFun',
        handler: 'index.GetPaymentDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.CreatePaymentHistoryDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/CreatePaymentHistoryDetails'),
        functionName: 'CreatePaymentHistoryDetailsFun',
        handler: 'index.CreatePaymentHistoryDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetPaymentHistoryDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetPaymentHistoryDetails'),
        functionName: 'GetPaymentHistoryDetailsFun',
        handler: 'index.GetPaymentHistoryDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetDistrictWisePostCodesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetDistrictWisePostCodes'),
        functionName: 'GetDistrictWisePostCodesFun',
        handler: 'index.GetDistrictWisePostCodesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
//# sourceMappingURL=data:application/json;base64,