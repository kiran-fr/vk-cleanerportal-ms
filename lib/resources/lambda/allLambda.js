"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeletePostcodesLambda = exports.GetAllPostcodesLambda = exports.UserPostCodesLambda = exports.UpdateWorksmanDetailsLambda = exports.GetWorkmanDetailsLambda = exports.getAllMobileNumberLambda = exports.PostTestUserLambda = exports.GetTestUserLambda = exports.GetWorksmanAccountRegistartionStatusLambda = exports.WorksManExperienceLambda = exports.WorksManTermsAndConditionLambda = exports.UserRegistrationLambda = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
exports.UserRegistrationLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/UserRegistration'),
        functionName: 'UserRegistration',
        handler: 'index.UserRegistrationHanlder',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.WorksManTermsAndConditionLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/WorksManTermsAndCondition'),
        functionName: 'WorksManTermsAndCondition',
        handler: 'index.WorksManTermsAndConditionHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.WorksManExperienceLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/WorksManExperience'),
        functionName: 'WorksManExperience',
        handler: 'index.WorksManExperienceHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(15)
    };
};
exports.GetWorksmanAccountRegistartionStatusLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetWorksmanAccountRegistartionStatus'),
        functionName: 'GetWorksmanAccountRegistartionStatus',
        handler: 'index.GetWorksmanAccountRegistartionStatusHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetTestUserLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetTestUser'),
        functionName: 'GetTestUser',
        handler: 'index.handler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.PostTestUserLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetPostTestUser'),
        functionName: 'PostTestUser',
        handler: 'index.handler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.getAllMobileNumberLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/userEmailError'),
        functionName: 'getAllMobileNumbers',
        handler: 'index.getAllMobileNumbersHanlder',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetWorkmanDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetWorksmanDetails'),
        functionName: 'GetWorkmanDetailsFun',
        handler: 'index.GetWorksmanDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.UpdateWorksmanDetailsLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/UpdateWorksmanDetails'),
        functionName: 'UpdateWorksmanDetailsFun',
        handler: 'index.UpdateWorksmanDetailsHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.UserPostCodesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/UserPostCodes'),
        functionName: 'UserPostCodesFun',
        handler: 'index.UserPostCodesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.GetAllPostcodesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/GetAllPostcodes'),
        functionName: 'GetAllPostcodesFun',
        handler: 'index.GetAllPostcodesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
exports.DeletePostcodesLambda = () => {
    return {
        code: lambda.Code.fromAsset('./functions/DeletePostcodes'),
        functionName: 'DeletePostcodesFun',
        handler: 'index.DeletePostcodesHandler',
        memorySize: 1024,
        runtime: lambda.Runtime.NODEJS_14_X,
        timeout: cdk.Duration.seconds(35)
    };
};
//# sourceMappingURL=data:application/json;base64,