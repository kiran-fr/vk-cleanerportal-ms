"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const GetWorksmanAccountRegistartionStatus = new lambda.Function(this, "GetWorksmanAccountRegistartionStatus", allLambda_1.GetWorksmanAccountRegistartionStatusLambda());
        const GetTestUser = new lambda.Function(this, "GetTestUser", allLambda_1.GetTestUserLambda());
        const PostTestUser = new lambda.Function(this, "PostTestUser", allLambda_1.PostTestUserLambda());
        const getAllMobileNumbersDemo = new lambda.Function(this, "getAllMobileNumber", allLambda_1.getAllMobileNumberLambda());
        const GetWorkmanDetailLambda = new lambda.Function(this, "GetWorkmanDetails", allLambda_1.GetWorkmanDetailsLambda());
        const UpdateWorksmanDetailLambda = new lambda.Function(this, "UpdateWorksmanDetail", allLambda_1.UpdateWorksmanDetailsLambda());
        const UserPostCodeLambdaApi = new lambda.Function(this, "UserPostCodes", allLambda_1.UserPostCodesLambda());
        const GetAllPostcodesLambdaApi = new lambda.Function(this, "GetAllPostcodes", allLambda_1.GetAllPostcodesLambda());
        const DeletePostcodesLambdaApi = new lambda.Function(this, "DeletePostcodes", allLambda_1.DeletePostcodesLambda());
        const WorksmnaScheduleLambdaApi = new lambda.Function(this, "WorksmnaScheduletcodes", allLambda_1.WorksmnaScheduleLambda());
        const DeleteWorkmanScheduleLambdaApi = new lambda.Function(this, "DeleteWorkmanSchedule", allLambda_1.DeleteWorkmanScheduleLambda());
        const GetWorksmanScheduleLambdaApi = new lambda.Function(this, "GetWorksmanSchedule", allLambda_1.GetWorksmanSchedulesLambda());
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants(apigateway));
        this.urlOutput = new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        // POST APIS
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
        AllApiGateWays_1.PostUserApiGateway(api, PostTestUser, 'POST');
        AllApiGateWays_1.UserPostCodesApiGateway(api, UserPostCodeLambdaApi, 'POST');
        AllApiGateWays_1.WorksmnaScheduleApiGateway(api, WorksmnaScheduleLambdaApi, 'POST');
        // GET APIS
        AllApiGateWays_1.GetWorksmanAccountRegistartionStatusApiGateway(api, GetWorksmanAccountRegistartionStatus, 'GET');
        AllApiGateWays_1.GetTestUserApiGateway(api, GetTestUser, 'GET');
        AllApiGateWays_1.getAllMobileNumbersApiGateway(api, getAllMobileNumbersDemo, 'GET');
        AllApiGateWays_1.GetWorkmanDetailsApiGateway(api, GetWorkmanDetailLambda, 'GET');
        AllApiGateWays_1.GetAllPostcodesApiGateway(api, GetAllPostcodesLambdaApi, 'GET');
        AllApiGateWays_1.GetWorksmanScheduleApiGateway(api, GetWorksmanScheduleLambdaApi, 'GET');
        // DELETE APIS
        AllApiGateWays_1.DeletePostcodesApiGateway(api, DeletePostcodesLambdaApi, 'DELETE');
        AllApiGateWays_1.DeleteWorkmanScheduleApiGateway(api, DeleteWorkmanScheduleLambdaApi, 'DELETE');
        // UPDATE APIS
        AllApiGateWays_1.UpdateWorksmanDetailsApiGateway(api, UpdateWorksmanDetailLambda, 'PUT');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,