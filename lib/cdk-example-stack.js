"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const sfn = require("@aws-cdk/aws-stepfunctions");
const tasks = require("@aws-cdk/aws-stepfunctions-tasks");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const GetWorksmanCurrentStatus = new lambda.Function(this, "GetWorksmanCurrentStatus", allLambda_1.GetWorksmanCurrentStatusLambda());
        const definition = new tasks.LambdaInvoke(this, 'User Registration', {
            lambdaFunction: userRegistration,
            outputPath: "$.Payload"
        });
        this.Machine = new sfn.StateMachine(this, "StateMachine", {
            definition,
        });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants());
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUFpSztBQUNqSyxrREFBa0Q7QUFDbEQsMERBQTBEO0FBQzFELHNEQUFxRDtBQUNyRCx3RUFBMEU7QUFDMUUsMEVBQTBIO0FBRTFILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsS0FBSztJQUU1QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQ2xFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxrQ0FBc0IsRUFBRSxDQUFDLENBQUE7UUFDaEcsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLDJDQUErQixFQUFFLENBQUMsQ0FBQTtRQUMzSCxNQUFNLGtCQUFrQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsb0NBQXdCLEVBQUUsQ0FBQyxDQUFBO1FBQ3RHLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBQywwQkFBMEIsRUFBQywwQ0FBOEIsRUFBRSxDQUFDLENBQUE7UUFFdEgsTUFBTSxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUNuRSxjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLFVBQVUsRUFBRSxXQUFXO1NBQ3hCLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDeEQsVUFBVTtTQUNYLENBQUMsQ0FBQztRQUVILE1BQU0sR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLDRDQUF1QixFQUFFLENBQUMsQ0FBQztRQUVuRixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV0RCxxREFBb0MsQ0FBQyxHQUFHLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDNUUsNkNBQTRCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBRS9ELENBQUM7Q0FDRjtBQTNCRCwwQ0EyQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XHJcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcclxuaW1wb3J0IHsgVXNlclJlZ2lzdHJhdGlvbkxhbWJkYSwgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkxhbWJkYSwgV29ya3NNYW5FeHBlcmllbmNlTGFtYmRhLCBHZXRXb3Jrc21hbkN1cnJlbnRTdGF0dXNMYW1iZGEgfSBmcm9tICcuL3Jlc291cmNlcy9sYW1iZGEvYWxsTGFtYmRhJztcclxuaW1wb3J0ICogYXMgc2ZuIGZyb20gXCJAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9uc1wiO1xyXG5pbXBvcnQgKiBhcyB0YXNrcyBmcm9tIFwiQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnMtdGFza3NcIjtcclxuaW1wb3J0ICogYXMgYXBpZ2F0ZXdheSBmcm9tIFwiQGF3cy1jZGsvYXdzLWFwaWdhdGV3YXlcIlxyXG5pbXBvcnQgeyBBcGlnYXRld2F5RGF0YUNvbnN0YW50cyB9IGZyb20gJy4uL2NvbnN0YW50cy9BcGlHYXRld2F5Q29uc3RhbnQnO1xyXG5pbXBvcnQgeyB3b3Jrc21hbkV4cGVyaWVuY2VBcGlHYXRld2F5LCBXb3Jrc21hblRlcm1zQW5kQ29uZGl0aW9uc0FwaUdhdGV3YXkgfSBmcm9tIFwiLi9yZXNvdXJjZXMvQXBpR2F0ZXdheS9BbGxBcGlHYXRlV2F5c1wiXHJcblxyXG5leHBvcnQgY2xhc3MgQ2RrRXhhbXBsZVN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcclxuICBwdWJsaWMgTWFjaGluZTogc2ZuLlN0YXRlTWFjaGluZTtcclxuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xyXG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XHJcblxyXG4gICAgY29uc3QgdXNlclJlZ2lzdHJhdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1VzZXJSZWdpc3RyYXRpb24nLCBVc2VyUmVnaXN0cmF0aW9uTGFtYmRhKCkpXHJcbiAgICBjb25zdCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbicsIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEoKSlcclxuICAgIGNvbnN0IFdvcmtzTWFuRXhwZXJpZW5jZSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvcmtzTWFuRXhwZXJpZW5jZScsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSgpKVxyXG4gICAgY29uc3QgR2V0V29ya3NtYW5DdXJyZW50U3RhdHVzID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLFwiR2V0V29ya3NtYW5DdXJyZW50U3RhdHVzXCIsR2V0V29ya3NtYW5DdXJyZW50U3RhdHVzTGFtYmRhKCkpXHJcblxyXG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IG5ldyB0YXNrcy5MYW1iZGFJbnZva2UodGhpcywgJ1VzZXIgUmVnaXN0cmF0aW9uJywge1xyXG4gICAgICBsYW1iZGFGdW5jdGlvbjogdXNlclJlZ2lzdHJhdGlvbixcclxuICAgICAgb3V0cHV0UGF0aDogXCIkLlBheWxvYWRcIlxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLk1hY2hpbmUgPSBuZXcgc2ZuLlN0YXRlTWFjaGluZSh0aGlzLCBcIlN0YXRlTWFjaGluZVwiLCB7XHJcbiAgICAgIGRlZmluaXRpb24sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBhcGkgPSBuZXcgYXBpZ2F0ZXdheS5SZXN0QXBpKHRoaXMsICdXb3Jrc01hbkFwaScsIEFwaWdhdGV3YXlEYXRhQ29uc3RhbnRzKCkpO1xyXG5cclxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdhcGlVcmwnLCB7IHZhbHVlOiBhcGkudXJsIH0pO1xyXG5cclxuICAgIFdvcmtzbWFuVGVybXNBbmRDb25kaXRpb25zQXBpR2F0ZXdheShhcGksIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb24sICdQT1NUJylcclxuICAgIHdvcmtzbWFuRXhwZXJpZW5jZUFwaUdhdGV3YXkoYXBpLCBXb3Jrc01hbkV4cGVyaWVuY2UsICdQT1NUJylcclxuXHJcbiAgfVxyXG59Il19