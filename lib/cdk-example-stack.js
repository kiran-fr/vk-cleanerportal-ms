"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const sfn = require("@aws-cdk/aws-stepfunctions");
const tasks = require("@aws-cdk/aws-stepfunctions-tasks");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const definition = new tasks.LambdaInvoke(this, 'User Registration', {
            lambdaFunction: userRegistration,
            outputPath: "$.Payload"
        });
        // .next(
        //   new tasks.LambdaInvoke(this, "User Email Confirm", {
        //     lambdaFunction: UserEmailConfirm,
        //     outputPath: "$.Payload",
        //   })
        // );
        this.Machine = new sfn.StateMachine(this, "StateMachine", {
            definition,
        });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants());
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUFnSTtBQUNoSSxrREFBa0Q7QUFDbEQsMERBQTBEO0FBQzFELHNEQUFxRDtBQUNyRCx3RUFBMEU7QUFDMUUsMEVBQXdIO0FBRXhILE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsS0FBSztJQUU1QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQ2xFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxrQ0FBc0IsRUFBRSxDQUFDLENBQUE7UUFDaEcsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLDJDQUErQixFQUFFLENBQUMsQ0FBQTtRQUMzSCxNQUFNLGtCQUFrQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsb0NBQXdCLEVBQUUsQ0FBQyxDQUFBO1FBSXRHLE1BQU0sVUFBVSxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7WUFDbkUsY0FBYyxFQUFFLGdCQUFnQjtZQUNoQyxVQUFVLEVBQUUsV0FBVztTQUN4QixDQUFDLENBQUE7UUFDQSxTQUFTO1FBQ1QseURBQXlEO1FBQ3pELHdDQUF3QztRQUN4QywrQkFBK0I7UUFDL0IsT0FBTztRQUNQLEtBQUs7UUFFUCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQ3hELFVBQVU7U0FDWCxDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSw0Q0FBdUIsRUFBRSxDQUFDLENBQUM7UUFFbkYsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFHdEQscURBQW9DLENBQUMsR0FBRyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzFFLDZDQUE0QixDQUFDLEdBQUcsRUFBQyxrQkFBa0IsRUFBQyxNQUFNLENBQUMsQ0FBQTtJQUU3RCxDQUFDO0NBQ0Y7QUFuQ0QsMENBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgVXNlclJlZ2lzdHJhdGlvbkxhbWJkYSxXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uTGFtYmRhLCBXb3Jrc01hbkV4cGVyaWVuY2VMYW1iZGEgfSBmcm9tICcuL3Jlc291cmNlcy9sYW1iZGEvYWxsTGFtYmRhJztcbmltcG9ydCAqIGFzIHNmbiBmcm9tIFwiQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnNcIjtcbmltcG9ydCAqIGFzIHRhc2tzIGZyb20gXCJAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrc1wiO1xuaW1wb3J0ICogYXMgYXBpZ2F0ZXdheSBmcm9tIFwiQGF3cy1jZGsvYXdzLWFwaWdhdGV3YXlcIlxuaW1wb3J0IHsgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMvQXBpR2F0ZXdheUNvbnN0YW50JztcbmltcG9ydCB7IHdvcmtzbWFuRXhwZXJpZW5jZUFwaUdhdGV3YXksV29ya3NtYW5UZXJtc0FuZENvbmRpdGlvbnNBcGlHYXRld2F5fSBmcm9tIFwiLi9yZXNvdXJjZXMvQXBpR2F0ZXdheS9BbGxBcGlHYXRlV2F5c1wiXG5cbmV4cG9ydCBjbGFzcyBDZGtFeGFtcGxlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBwdWJsaWMgTWFjaGluZTogc2ZuLlN0YXRlTWFjaGluZTtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHVzZXJSZWdpc3RyYXRpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdVc2VyUmVnaXN0cmF0aW9uJywgVXNlclJlZ2lzdHJhdGlvbkxhbWJkYSgpKVxuICAgIGNvbnN0IFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uJywgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkxhbWJkYSgpKVxuICAgIGNvbnN0IFdvcmtzTWFuRXhwZXJpZW5jZSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvcmtzTWFuRXhwZXJpZW5jZScsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSgpKVxuICAgIFxuXG5cbiAgICBjb25zdCBkZWZpbml0aW9uID0gbmV3IHRhc2tzLkxhbWJkYUludm9rZSh0aGlzLCAnVXNlciBSZWdpc3RyYXRpb24nLCB7XG4gICAgICBsYW1iZGFGdW5jdGlvbjogdXNlclJlZ2lzdHJhdGlvbixcbiAgICAgIG91dHB1dFBhdGg6IFwiJC5QYXlsb2FkXCJcbiAgICB9KVxuICAgICAgLy8gLm5leHQoXG4gICAgICAvLyAgIG5ldyB0YXNrcy5MYW1iZGFJbnZva2UodGhpcywgXCJVc2VyIEVtYWlsIENvbmZpcm1cIiwge1xuICAgICAgLy8gICAgIGxhbWJkYUZ1bmN0aW9uOiBVc2VyRW1haWxDb25maXJtLFxuICAgICAgLy8gICAgIG91dHB1dFBhdGg6IFwiJC5QYXlsb2FkXCIsXG4gICAgICAvLyAgIH0pXG4gICAgICAvLyApO1xuXG4gICAgdGhpcy5NYWNoaW5lID0gbmV3IHNmbi5TdGF0ZU1hY2hpbmUodGhpcywgXCJTdGF0ZU1hY2hpbmVcIiwge1xuICAgICAgZGVmaW5pdGlvbixcbiAgICB9KTtcblxuICAgIGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LlJlc3RBcGkodGhpcywgJ1dvcmtzTWFuQXBpJywgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMoKSk7XG5cbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnYXBpVXJsJywgeyB2YWx1ZTogYXBpLnVybCB9KTtcblxuXG4gICAgV29ya3NtYW5UZXJtc0FuZENvbmRpdGlvbnNBcGlHYXRld2F5KGFwaSxXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uLCdQT1NUJylcbiAgICB3b3Jrc21hbkV4cGVyaWVuY2VBcGlHYXRld2F5KGFwaSxXb3Jrc01hbkV4cGVyaWVuY2UsJ1BPU1QnKVxuXG4gIH1cbn0iXX0=