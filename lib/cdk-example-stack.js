"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const GetWorksmanAccountRegistartionStatus = new lambda.Function(this, "GetWorksmanAccountRegistartionStatus", allLambda_1.GetWorksmanAccountRegistartionStatusLambda());
        // const GetTestUser = new lambda.Function(this,"GetTestUser",GetTestUserLambda())
        // const PostTestUser = new lambda.Function(this,"PostTestUser",PostTestUserLambda())
        // const definition = new tasks.LambdaInvoke(this, 'User Registration', {
        //   lambdaFunction: userRegistration,
        //   outputPath: "$.Payload"
        // })
        // this.Machine = new sfn.StateMachine(this, "StateMachine", {
        //   definition,
        // });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants(apigateway));
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
        AllApiGateWays_1.GetWorksmanAccountRegistartionStatusApiGateway(api, GetWorksmanAccountRegistartionStatus, 'GET');
        // GetTestUserApiGateway(api,GetTestUser, 'GET')
        // PostUserApiGateway(api,PostTestUser, 'POST')
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUFvTjtBQUdwTixzREFBcUQ7QUFDckQsd0VBQTBFO0FBQzFFLDBFQUFxTjtBQUVyTixNQUFhLGVBQWdCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFFNUMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLGdCQUFnQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsa0NBQXNCLEVBQUUsQ0FBQyxDQUFBO1FBQ2hHLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSwyQ0FBK0IsRUFBRSxDQUFDLENBQUE7UUFDM0gsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUN0RyxNQUFNLG9DQUFvQyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsc0NBQXNDLEVBQUMsc0RBQTBDLEVBQUUsQ0FBQyxDQUFBO1FBQzFKLGtGQUFrRjtRQUNsRixxRkFBcUY7UUFHckYseUVBQXlFO1FBQ3pFLHNDQUFzQztRQUN0Qyw0QkFBNEI7UUFDNUIsS0FBSztRQUVMLDhEQUE4RDtRQUM5RCxnQkFBZ0I7UUFDaEIsTUFBTTtRQUNOLE1BQU0sR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLDRDQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFHN0YsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdEQscURBQW9DLENBQUMsR0FBRyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzVFLDZDQUE0QixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUM3RCwrREFBOEMsQ0FBQyxHQUFHLEVBQUMsb0NBQW9DLEVBQUMsS0FBSyxDQUFDLENBQUE7UUFDOUYsZ0RBQWdEO1FBQ2hELCtDQUErQztJQUVqRCxDQUFDO0NBQ0Y7QUFqQ0QsMENBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnQGF3cy1jZGsvYXdzLWxhbWJkYSc7XHJcbmltcG9ydCB7IFVzZXJSZWdpc3RyYXRpb25MYW1iZGEsIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSwgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzTGFtYmRhLCBHZXRUZXN0VXNlckxhbWJkYSwgUG9zdFRlc3RVc2VyTGFtYmRhIH0gZnJvbSAnLi9yZXNvdXJjZXMvbGFtYmRhL2FsbExhbWJkYSc7XHJcbmltcG9ydCAqIGFzIHNmbiBmcm9tIFwiQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnNcIjtcclxuaW1wb3J0ICogYXMgdGFza3MgZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzXCI7XHJcbmltcG9ydCAqIGFzIGFwaWdhdGV3YXkgZnJvbSBcIkBhd3MtY2RrL2F3cy1hcGlnYXRld2F5XCJcclxuaW1wb3J0IHsgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMvQXBpR2F0ZXdheUNvbnN0YW50JztcclxuaW1wb3J0IHsgR2V0VGVzdFVzZXJBcGlHYXRld2F5LCBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNBcGlHYXRld2F5LCBQb3N0VXNlckFwaUdhdGV3YXksIHdvcmtzbWFuRXhwZXJpZW5jZUFwaUdhdGV3YXksIFdvcmtzbWFuVGVybXNBbmRDb25kaXRpb25zQXBpR2F0ZXdheSB9IGZyb20gXCIuL3Jlc291cmNlcy9BcGlHYXRld2F5L0FsbEFwaUdhdGVXYXlzXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBDZGtFeGFtcGxlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xyXG4gIHB1YmxpYyBNYWNoaW5lOiBzZm4uU3RhdGVNYWNoaW5lO1xyXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XHJcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcclxuXHJcbiAgICBjb25zdCB1c2VyUmVnaXN0cmF0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnVXNlclJlZ2lzdHJhdGlvbicsIFVzZXJSZWdpc3RyYXRpb25MYW1iZGEoKSlcclxuICAgIGNvbnN0IFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uJywgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkxhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NNYW5FeHBlcmllbmNlID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnV29ya3NNYW5FeHBlcmllbmNlJywgV29ya3NNYW5FeHBlcmllbmNlTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXMgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsXCJHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNcIixHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNMYW1iZGEoKSlcclxuICAgIC8vIGNvbnN0IEdldFRlc3RVc2VyID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLFwiR2V0VGVzdFVzZXJcIixHZXRUZXN0VXNlckxhbWJkYSgpKVxyXG4gICAgLy8gY29uc3QgUG9zdFRlc3RVc2VyID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLFwiUG9zdFRlc3RVc2VyXCIsUG9zdFRlc3RVc2VyTGFtYmRhKCkpXHJcblxyXG4gICAgXHJcbiAgICAvLyBjb25zdCBkZWZpbml0aW9uID0gbmV3IHRhc2tzLkxhbWJkYUludm9rZSh0aGlzLCAnVXNlciBSZWdpc3RyYXRpb24nLCB7XHJcbiAgICAvLyAgIGxhbWJkYUZ1bmN0aW9uOiB1c2VyUmVnaXN0cmF0aW9uLFxyXG4gICAgLy8gICBvdXRwdXRQYXRoOiBcIiQuUGF5bG9hZFwiXHJcbiAgICAvLyB9KVxyXG5cclxuICAgIC8vIHRoaXMuTWFjaGluZSA9IG5ldyBzZm4uU3RhdGVNYWNoaW5lKHRoaXMsIFwiU3RhdGVNYWNoaW5lXCIsIHtcclxuICAgIC8vICAgZGVmaW5pdGlvbixcclxuICAgIC8vIH0pO1xyXG4gICAgY29uc3QgYXBpID0gbmV3IGFwaWdhdGV3YXkuUmVzdEFwaSh0aGlzLCAnV29ya3NNYW5BcGknLCBBcGlnYXRld2F5RGF0YUNvbnN0YW50cyhhcGlnYXRld2F5KSk7XHJcbiAgICBcclxuXHJcbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnYXBpVXJsJywgeyB2YWx1ZTogYXBpLnVybCB9KTtcclxuXHJcbiAgICBXb3Jrc21hblRlcm1zQW5kQ29uZGl0aW9uc0FwaUdhdGV3YXkoYXBpLCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uLCAnUE9TVCcpXHJcbiAgICB3b3Jrc21hbkV4cGVyaWVuY2VBcGlHYXRld2F5KGFwaSwgV29ya3NNYW5FeHBlcmllbmNlLCAnUE9TVCcpXHJcbiAgICBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNBcGlHYXRld2F5KGFwaSxHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXMsJ0dFVCcpXHJcbiAgICAvLyBHZXRUZXN0VXNlckFwaUdhdGV3YXkoYXBpLEdldFRlc3RVc2VyLCAnR0VUJylcclxuICAgIC8vIFBvc3RVc2VyQXBpR2F0ZXdheShhcGksUG9zdFRlc3RVc2VyLCAnUE9TVCcpXHJcbiAgXHJcbiAgfVxyXG59Il19