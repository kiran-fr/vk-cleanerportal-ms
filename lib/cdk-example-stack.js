"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
const cognito = require("@aws-cdk/aws-cognito");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const GetWorksmanAccountRegistartionStatus = new lambda.Function(this, "GetWorksmanAccountRegistartionStatus", allLambda_1.GetWorksmanAccountRegistartionStatusLambda());
        const GetTestUser = new lambda.Function(this, "GetTestUser", allLambda_1.GetTestUserLambda());
        const PostTestUser = new lambda.Function(this, "PostTestUser", allLambda_1.PostTestUserLambda());
        const getAllMobileNumbersDemo = new lambda.Function(this, "getAllMobileNumber", allLambda_1.getAllMobileNumberLambda());
        const GetWorkmanDetailLambda = new lambda.Function(this, "GetWorkmanDetails", allLambda_1.GetWorkmanDetailsLambda());
        const UpdateWorksmanDetailLambda = new lambda.Function(this, "UpdateWorksmanDetail", allLambda_1.UpdateWorksmanDetailsLambda());
        const UserPostCodeLambdaApi = new lambda.Function(this, "UserPostCodes", allLambda_1.UserPostCodesLambda());
        const GetAllPostcodesLambdaApi = new lambda.Function(this, "GetAllPostcodes", allLambda_1.GetAllPostcodesLambda());
        const DeletePostcodesLambdaApi = new lambda.Function(this, "DeletePostcodes", allLambda_1.DeletePostcodesLambda());
        const WorksmnaScheduleLambdaApi = new lambda.Function(this, "WorksmnaScheduletcodes", allLambda_1.WorksmnaScheduleLambda());
        const DeleteWorkmanScheduleLambdaApi = new lambda.Function(this, "DeleteWorkmanSchedule", allLambda_1.DeleteWorkmanScheduleLambda());
        const GetWorksmanScheduleLambdaApi = new lambda.Function(this, "GetWorksmanSchedule", allLambda_1.GetWorksmanSchedulesLambda());
        const GetWorksmanjobsLambdaApi = new lambda.Function(this, "GetWorksmanjobs", allLambda_1.GetWorksmanjobsLambda());
        const WorksmanjobsCreateLambdaApi = new lambda.Function(this, "WorksmanjobsCreate", allLambda_1.WorksmanjobsCreateLambda());
        const CreateBankDetailsLambdaApi = new lambda.Function(this, "CreateBankDetails", allLambda_1.CreateBankDetailsLambda());
        const GetBankDetailsLambdaApi = new lambda.Function(this, "GetBankDetails", allLambda_1.GetBankDetailsLambda());
        const CreateMessagesLambdaApi = new lambda.Function(this, "CreateMessages", allLambda_1.CreateMessagesLambda());
        const GetMessagesLambdaApi = new lambda.Function(this, "GetMessages", allLambda_1.GetMessagesLambda());
        const api = new apigateway.RestApi(this, 'WorksManApiDefault', ApiGatewayConstant_1.ApigatewayDataConstants(apigateway));
        const userPool = new cognito.UserPool(this, 'userpool', {
            userPoolName: `vk-clean-portal`,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            selfSignUpEnabled: true,
            signInAliases: { email: true, phone: true },
            autoVerify: { email: true },
            passwordPolicy: {
                minLength: 6,
                requireLowercase: true,
                requireDigits: true,
                requireUppercase: true,
                requireSymbols: true,
            },
            standardAttributes: {
                givenName: {
                    required: true,
                    mutable: true
                },
                familyName: {
                    required: true,
                    mutable: true
                },
                email: {
                    required: true,
                    mutable: true
                },
                address: {
                    required: true,
                    mutable: true
                },
                birthdate: {
                    required: true,
                    mutable: true
                },
                gender: {
                    required: true,
                    mutable: true
                },
                locale: {
                    required: true,
                    mutable: true
                },
                phoneNumber: {
                    required: true,
                    mutable: true
                },
            },
            accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,
        });
        const standardCognitoAttributes = {
            givenName: true,
            familyName: true,
            email: true,
            address: true,
            birthdate: true,
            gender: true,
            locale: true,
            phoneNumber: true,
        };
        const clientReadAttributes = new cognito.ClientAttributes()
            .withStandardAttributes(standardCognitoAttributes);
        const clientWriteAttributes = new cognito.ClientAttributes()
            .withStandardAttributes({
            ...standardCognitoAttributes,
            emailVerified: false,
            phoneNumberVerified: false,
        });
        const userPoolClient = new cognito.UserPoolClient(this, 'userpool-client', {
            userPool,
            authFlows: {
                adminUserPassword: true,
                custom: true,
                userSrp: true,
                userPassword: true
            },
            supportedIdentityProviders: [
                cognito.UserPoolClientIdentityProvider.COGNITO,
            ],
            readAttributes: clientReadAttributes,
            writeAttributes: clientWriteAttributes,
        });
        new cdk.CfnOutput(this, 'region', { value: cdk.Stack.of(this).region });
        new cdk.CfnOutput(this, 'userPoolId', { value: userPool.userPoolId });
        new cdk.CfnOutput(this, 'userPoolClientId', {
            value: userPoolClient.userPoolClientId,
        });
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        const auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'Authorizer', {
            cognitoUserPools: [userPool]
        });
        // POST APIS
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST', auth);
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST', auth);
        AllApiGateWays_1.PostUserApiGateway(api, PostTestUser, 'POST', auth);
        AllApiGateWays_1.UserPostCodesApiGateway(api, UserPostCodeLambdaApi, 'POST', auth);
        AllApiGateWays_1.WorksmnaScheduleApiGateway(api, WorksmnaScheduleLambdaApi, 'POST', auth);
        AllApiGateWays_1.WorksmanjobsCreateApiGateway(api, WorksmanjobsCreateLambdaApi, 'POST', auth);
        AllApiGateWays_1.CreateBankDetailsApiGateway(api, CreateBankDetailsLambdaApi, 'POST', auth);
        AllApiGateWays_1.CreateMessagesApiGateway(api, CreateMessagesLambdaApi, 'POST', auth);
        // GET APIS
        AllApiGateWays_1.GetWorksmanAccountRegistartionStatusApiGateway(api, GetWorksmanAccountRegistartionStatus, 'GET', auth);
        AllApiGateWays_1.GetTestUserApiGateway(api, GetTestUser, 'GET', auth);
        AllApiGateWays_1.getAllMobileNumbersApiGateway(api, getAllMobileNumbersDemo, 'GET');
        AllApiGateWays_1.GetWorkmanDetailsApiGateway(api, GetWorkmanDetailLambda, 'GET', auth);
        AllApiGateWays_1.GetAllPostcodesApiGateway(api, GetAllPostcodesLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetWorksmanScheduleApiGateway(api, GetWorksmanScheduleLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetWorksmanjobsApiGateway(api, GetWorksmanjobsLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetBankDetailsApiGateway(api, GetBankDetailsLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetMessagesApiGateway(api, GetMessagesLambdaApi, 'GET', auth);
        // DELETE APIS
        AllApiGateWays_1.DeletePostcodesApiGateway(api, DeletePostcodesLambdaApi, 'DELETE', auth);
        AllApiGateWays_1.DeleteWorkmanScheduleApiGateway(api, DeleteWorkmanScheduleLambdaApi, 'DELETE', auth);
        // UPDATE APIS
        AllApiGateWays_1.UpdateWorksmanDetailsApiGateway(api, UpdateWorksmanDetailLambda, 'PUT', auth);
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,