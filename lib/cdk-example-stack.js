"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const sfn = require("@aws-cdk/aws-stepfunctions");
const tasks = require("@aws-cdk/aws-stepfunctions-tasks");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const UserEmailConfirm = new lambda.Function(this, 'UserEmailConfirm', allLambda_1.userEmailConfirm());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const WorksManAddress = new lambda.Function(this, 'WorksManAddress', allLambda_1.WorksManAddressLambda());
        const definition = new tasks.LambdaInvoke(this, 'User Registration', {
            lambdaFunction: userRegistration,
            outputPath: "$.Payload"
        })
            .next(new tasks.LambdaInvoke(this, "User Email Confirm", {
            lambdaFunction: UserEmailConfirm,
            outputPath: "$.Payload",
        }));
        this.Machine = new sfn.StateMachine(this, "StateMachine", {
            definition,
        });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants());
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
        AllApiGateWays_1.WorksmanAddressApiGateway(api, WorksManAddress, 'POST');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUEwSztBQUMxSyxrREFBa0Q7QUFDbEQsMERBQTBEO0FBQzFELHNEQUFxRDtBQUNyRCx3RUFBMEU7QUFDMUUsMEVBQWtKO0FBRWxKLE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsS0FBSztJQUU1QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQ2xFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxrQ0FBc0IsRUFBRSxDQUFDLENBQUE7UUFDaEcsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLDRCQUFnQixFQUFFLENBQUMsQ0FBQTtRQUMxRixNQUFNLHlCQUF5QixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsMkNBQStCLEVBQUUsQ0FBQyxDQUFBO1FBQzNILE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRSxvQ0FBd0IsRUFBRSxDQUFDLENBQUE7UUFDdEcsTUFBTSxlQUFlLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBQyxpQkFBaUIsRUFBQyxpQ0FBcUIsRUFBRSxDQUFDLENBQUE7UUFFM0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUNuRSxjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLFVBQVUsRUFBRSxXQUFXO1NBQ3hCLENBQUM7YUFDQyxJQUFJLENBQ0gsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUNqRCxjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLFVBQVUsRUFBRSxXQUFXO1NBQ3hCLENBQUMsQ0FDSCxDQUFDO1FBRUosSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUN4RCxVQUFVO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsNENBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBRW5GLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBR3RELHFEQUFvQyxDQUFDLEdBQUcsRUFBQyx5QkFBeUIsRUFBQyxNQUFNLENBQUMsQ0FBQTtRQUMxRSw2Q0FBNEIsQ0FBQyxHQUFHLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxDQUFDLENBQUE7UUFDM0QsMENBQXlCLENBQUMsR0FBRyxFQUFDLGVBQWUsRUFBQyxNQUFNLENBQUMsQ0FBQTtJQUV2RCxDQUFDO0NBQ0Y7QUFwQ0QsMENBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnQGF3cy1jZGsvYXdzLWxhbWJkYSc7XHJcbmltcG9ydCB7IFVzZXJSZWdpc3RyYXRpb25MYW1iZGEsIHVzZXJFbWFpbENvbmZpcm0sIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSwgV29ya3NNYW5BZGRyZXNzTGFtYmRhIH0gZnJvbSAnLi9yZXNvdXJjZXMvbGFtYmRhL2FsbExhbWJkYSc7XHJcbmltcG9ydCAqIGFzIHNmbiBmcm9tIFwiQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnNcIjtcclxuaW1wb3J0ICogYXMgdGFza3MgZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzXCI7XHJcbmltcG9ydCAqIGFzIGFwaWdhdGV3YXkgZnJvbSBcIkBhd3MtY2RrL2F3cy1hcGlnYXRld2F5XCJcclxuaW1wb3J0IHsgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMvQXBpR2F0ZXdheUNvbnN0YW50JztcclxuaW1wb3J0IHsgd29ya3NtYW5FeHBlcmllbmNlQXBpR2F0ZXdheSxXb3Jrc21hbkFkZHJlc3NBcGlHYXRld2F5LFdvcmtzbWFuVGVybXNBbmRDb25kaXRpb25zQXBpR2F0ZXdheX0gZnJvbSBcIi4vcmVzb3VyY2VzL0FwaUdhdGV3YXkvQWxsQXBpR2F0ZVdheXNcIlxyXG5cclxuZXhwb3J0IGNsYXNzIENka0V4YW1wbGVTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XHJcbiAgcHVibGljIE1hY2hpbmU6IHNmbi5TdGF0ZU1hY2hpbmU7XHJcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcclxuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgIGNvbnN0IHVzZXJSZWdpc3RyYXRpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdVc2VyUmVnaXN0cmF0aW9uJywgVXNlclJlZ2lzdHJhdGlvbkxhbWJkYSgpKVxyXG4gICAgY29uc3QgVXNlckVtYWlsQ29uZmlybSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1VzZXJFbWFpbENvbmZpcm0nLCB1c2VyRW1haWxDb25maXJtKCkpXHJcbiAgICBjb25zdCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbicsIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEoKSlcclxuICAgIGNvbnN0IFdvcmtzTWFuRXhwZXJpZW5jZSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvcmtzTWFuRXhwZXJpZW5jZScsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NNYW5BZGRyZXNzID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCdXb3Jrc01hbkFkZHJlc3MnLFdvcmtzTWFuQWRkcmVzc0xhbWJkYSgpKVxyXG5cclxuICAgIGNvbnN0IGRlZmluaXRpb24gPSBuZXcgdGFza3MuTGFtYmRhSW52b2tlKHRoaXMsICdVc2VyIFJlZ2lzdHJhdGlvbicsIHtcclxuICAgICAgbGFtYmRhRnVuY3Rpb246IHVzZXJSZWdpc3RyYXRpb24sXHJcbiAgICAgIG91dHB1dFBhdGg6IFwiJC5QYXlsb2FkXCJcclxuICAgIH0pXHJcbiAgICAgIC5uZXh0KFxyXG4gICAgICAgIG5ldyB0YXNrcy5MYW1iZGFJbnZva2UodGhpcywgXCJVc2VyIEVtYWlsIENvbmZpcm1cIiwge1xyXG4gICAgICAgICAgbGFtYmRhRnVuY3Rpb246IFVzZXJFbWFpbENvbmZpcm0sXHJcbiAgICAgICAgICBvdXRwdXRQYXRoOiBcIiQuUGF5bG9hZFwiLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcblxyXG4gICAgdGhpcy5NYWNoaW5lID0gbmV3IHNmbi5TdGF0ZU1hY2hpbmUodGhpcywgXCJTdGF0ZU1hY2hpbmVcIiwge1xyXG4gICAgICBkZWZpbml0aW9uLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgYXBpID0gbmV3IGFwaWdhdGV3YXkuUmVzdEFwaSh0aGlzLCAnV29ya3NNYW5BcGknLCBBcGlnYXRld2F5RGF0YUNvbnN0YW50cygpKTtcclxuXHJcbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnYXBpVXJsJywgeyB2YWx1ZTogYXBpLnVybCB9KTtcclxuXHJcblxyXG4gICAgV29ya3NtYW5UZXJtc0FuZENvbmRpdGlvbnNBcGlHYXRld2F5KGFwaSxXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uLCdQT1NUJylcclxuICAgIHdvcmtzbWFuRXhwZXJpZW5jZUFwaUdhdGV3YXkoYXBpLFdvcmtzTWFuRXhwZXJpZW5jZSwnUE9TVCcpXHJcbiAgICBXb3Jrc21hbkFkZHJlc3NBcGlHYXRld2F5KGFwaSxXb3Jrc01hbkFkZHJlc3MsJ1BPU1QnKVxyXG5cclxuICB9XHJcbn0iXX0=