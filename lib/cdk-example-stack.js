"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const sfn = require("@aws-cdk/aws-stepfunctions");
const tasks = require("@aws-cdk/aws-stepfunctions-tasks");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const UserEmailConfirm = new lambda.Function(this, 'UserEmailConfirm', allLambda_1.userEmailConfirm());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const WorksmanEligibility = new lambda.Function(this, 'WorksmanEligibility', allLambda_1.WorksmanEligibilityLambda());
        const WorksManAddress = new lambda.Function(this, 'WorksManAddress', allLambda_1.WorksManAddressLambda());
        const definition = new tasks.LambdaInvoke(this, 'User Registration', {
            lambdaFunction: userRegistration,
            outputPath: "$.Payload"
        })
            .next(new tasks.LambdaInvoke(this, "User Email Confirm", {
            lambdaFunction: UserEmailConfirm,
            outputPath: "$.Payload",
        }));
        this.Machine = new sfn.StateMachine(this, "StateMachine", {
            definition,
        });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants());
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
        AllApiGateWays_1.worksmanEligibilityApiGateway(api, WorksmanEligibility, 'POST');
        AllApiGateWays_1.WorksmanAddressApiGateway(api, WorksManAddress, 'POST');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUFxTTtBQUNyTSxrREFBa0Q7QUFDbEQsMERBQTBEO0FBQzFELHNEQUFxRDtBQUNyRCx3RUFBMEU7QUFDMUUsMEVBQWdMO0FBRWhMLE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsS0FBSztJQUU1QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQ2xFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxrQ0FBc0IsRUFBRSxDQUFDLENBQUE7UUFDaEcsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLDRCQUFnQixFQUFFLENBQUMsQ0FBQTtRQUMxRixNQUFNLHlCQUF5QixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsMkNBQStCLEVBQUUsQ0FBQyxDQUFBO1FBQzNILE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRSxvQ0FBd0IsRUFBRSxDQUFDLENBQUE7UUFDdEcsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLHFCQUFxQixFQUFFLHFDQUF5QixFQUFFLENBQUMsQ0FBQTtRQUN6RyxNQUFNLGVBQWUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFDLGlCQUFpQixFQUFDLGlDQUFxQixFQUFFLENBQUMsQ0FBQTtRQUUzRixNQUFNLFVBQVUsR0FBRyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQ25FLGNBQWMsRUFBRSxnQkFBZ0I7WUFDaEMsVUFBVSxFQUFFLFdBQVc7U0FDeEIsQ0FBQzthQUNDLElBQUksQ0FDSCxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFO1lBQ2pELGNBQWMsRUFBRSxnQkFBZ0I7WUFDaEMsVUFBVSxFQUFFLFdBQVc7U0FDeEIsQ0FBQyxDQUNILENBQUM7UUFFSixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQ3hELFVBQVU7U0FDWCxDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSw0Q0FBdUIsRUFBRSxDQUFDLENBQUM7UUFFbkYsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFHdEQscURBQW9DLENBQUMsR0FBRyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzFFLDZDQUE0QixDQUFDLEdBQUcsRUFBQyxrQkFBa0IsRUFBQyxNQUFNLENBQUMsQ0FBQTtRQUMzRCw4Q0FBNkIsQ0FBQyxHQUFHLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxDQUFDLENBQUE7UUFDN0QsMENBQXlCLENBQUMsR0FBRyxFQUFDLGVBQWUsRUFBQyxNQUFNLENBQUMsQ0FBQTtJQUV2RCxDQUFDO0NBQ0Y7QUF0Q0QsMENBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnQGF3cy1jZGsvYXdzLWxhbWJkYSc7XHJcbmltcG9ydCB7IFVzZXJSZWdpc3RyYXRpb25MYW1iZGEsIHVzZXJFbWFpbENvbmZpcm0sIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSwgV29ya3NtYW5FbGlnaWJpbGl0eUxhbWJkYSwgV29ya3NNYW5BZGRyZXNzTGFtYmRhIH0gZnJvbSAnLi9yZXNvdXJjZXMvbGFtYmRhL2FsbExhbWJkYSc7XHJcbmltcG9ydCAqIGFzIHNmbiBmcm9tIFwiQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnNcIjtcclxuaW1wb3J0ICogYXMgdGFza3MgZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzXCI7XHJcbmltcG9ydCAqIGFzIGFwaWdhdGV3YXkgZnJvbSBcIkBhd3MtY2RrL2F3cy1hcGlnYXRld2F5XCJcclxuaW1wb3J0IHsgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMvQXBpR2F0ZXdheUNvbnN0YW50JztcclxuaW1wb3J0IHsgd29ya3NtYW5FbGlnaWJpbGl0eUFwaUdhdGV3YXksd29ya3NtYW5FeHBlcmllbmNlQXBpR2F0ZXdheSxXb3Jrc21hbkFkZHJlc3NBcGlHYXRld2F5LFdvcmtzbWFuVGVybXNBbmRDb25kaXRpb25zQXBpR2F0ZXdheX0gZnJvbSBcIi4vcmVzb3VyY2VzL0FwaUdhdGV3YXkvQWxsQXBpR2F0ZVdheXNcIlxyXG5cclxuZXhwb3J0IGNsYXNzIENka0V4YW1wbGVTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XHJcbiAgcHVibGljIE1hY2hpbmU6IHNmbi5TdGF0ZU1hY2hpbmU7XHJcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcclxuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgIGNvbnN0IHVzZXJSZWdpc3RyYXRpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdVc2VyUmVnaXN0cmF0aW9uJywgVXNlclJlZ2lzdHJhdGlvbkxhbWJkYSgpKVxyXG4gICAgY29uc3QgVXNlckVtYWlsQ29uZmlybSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1VzZXJFbWFpbENvbmZpcm0nLCB1c2VyRW1haWxDb25maXJtKCkpXHJcbiAgICBjb25zdCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbicsIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEoKSlcclxuICAgIGNvbnN0IFdvcmtzTWFuRXhwZXJpZW5jZSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvcmtzTWFuRXhwZXJpZW5jZScsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NtYW5FbGlnaWJpbGl0eSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvcmtzbWFuRWxpZ2liaWxpdHknLCBXb3Jrc21hbkVsaWdpYmlsaXR5TGFtYmRhKCkpXHJcbiAgICBjb25zdCBXb3Jrc01hbkFkZHJlc3MgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsJ1dvcmtzTWFuQWRkcmVzcycsV29ya3NNYW5BZGRyZXNzTGFtYmRhKCkpXHJcblxyXG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IG5ldyB0YXNrcy5MYW1iZGFJbnZva2UodGhpcywgJ1VzZXIgUmVnaXN0cmF0aW9uJywge1xyXG4gICAgICBsYW1iZGFGdW5jdGlvbjogdXNlclJlZ2lzdHJhdGlvbixcclxuICAgICAgb3V0cHV0UGF0aDogXCIkLlBheWxvYWRcIlxyXG4gICAgfSlcclxuICAgICAgLm5leHQoXHJcbiAgICAgICAgbmV3IHRhc2tzLkxhbWJkYUludm9rZSh0aGlzLCBcIlVzZXIgRW1haWwgQ29uZmlybVwiLCB7XHJcbiAgICAgICAgICBsYW1iZGFGdW5jdGlvbjogVXNlckVtYWlsQ29uZmlybSxcclxuICAgICAgICAgIG91dHB1dFBhdGg6IFwiJC5QYXlsb2FkXCIsXHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICB0aGlzLk1hY2hpbmUgPSBuZXcgc2ZuLlN0YXRlTWFjaGluZSh0aGlzLCBcIlN0YXRlTWFjaGluZVwiLCB7XHJcbiAgICAgIGRlZmluaXRpb24sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBhcGkgPSBuZXcgYXBpZ2F0ZXdheS5SZXN0QXBpKHRoaXMsICdXb3Jrc01hbkFwaScsIEFwaWdhdGV3YXlEYXRhQ29uc3RhbnRzKCkpO1xyXG5cclxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdhcGlVcmwnLCB7IHZhbHVlOiBhcGkudXJsIH0pO1xyXG5cclxuXHJcbiAgICBXb3Jrc21hblRlcm1zQW5kQ29uZGl0aW9uc0FwaUdhdGV3YXkoYXBpLFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb24sJ1BPU1QnKVxyXG4gICAgd29ya3NtYW5FeHBlcmllbmNlQXBpR2F0ZXdheShhcGksV29ya3NNYW5FeHBlcmllbmNlLCdQT1NUJylcclxuICAgIHdvcmtzbWFuRWxpZ2liaWxpdHlBcGlHYXRld2F5KGFwaSxXb3Jrc21hbkVsaWdpYmlsaXR5LCdQT1NUJylcclxuICAgIFdvcmtzbWFuQWRkcmVzc0FwaUdhdGV3YXkoYXBpLFdvcmtzTWFuQWRkcmVzcywnUE9TVCcpXHJcblxyXG4gIH1cclxufSJdfQ==