"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const GetWorksmanAccountRegistartionStatus = new lambda.Function(this, "GetWorksmanAccountRegistartionStatus", allLambda_1.GetWorksmanAccountRegistartionStatusLambda());
        const GetTestUser = new lambda.Function(this, "GetTestUser", allLambda_1.GetTestUserLambda());
        const PostTestUser = new lambda.Function(this, "PostTestUser", allLambda_1.PostTestUserLambda());
        const getAllMobileNumbersDemo = new lambda.Function(this, "getAllMobileNumber", allLambda_1.getAllMobileNumberLambda());
        const GetWorkmanDetailLambda = new lambda.Function(this, "GetWorkmanDetails", allLambda_1.GetWorkmanDetailsLambda());
        const UpdateWorksmanDetailLambda = new lambda.Function(this, "UpdateWorksmanDetail", allLambda_1.UpdateWorksmanDetailsLambda());
        // const definition = new tasks.LambdaInvoke(this, 'User Registration', {
        //   lambdaFunction: userRegistration,
        //   outputPath: "$.Payload"
        // })
        // this.Machine = new sfn.StateMachine(this, "StateMachine", {
        //   definition,
        // });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants(apigateway));
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
        AllApiGateWays_1.GetWorksmanAccountRegistartionStatusApiGateway(api, GetWorksmanAccountRegistartionStatus, 'GET');
        AllApiGateWays_1.GetTestUserApiGateway(api, GetTestUser, 'GET');
        AllApiGateWays_1.PostUserApiGateway(api, PostTestUser, 'POST');
        AllApiGateWays_1.getAllMobileNumbersApiGateway(api, getAllMobileNumbersDemo, 'GET');
        AllApiGateWays_1.GetWorkmanDetailsApiGateway(api, GetWorkmanDetailLambda, 'GET');
        AllApiGateWays_1.UpdateWorksmanDetailsApi(api, UpdateWorksmanDetailLambda, 'PUT');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUdvRTtBQUdwRSxzREFBcUQ7QUFDckQsd0VBQTBFO0FBQzFFLDBFQUd3RTtBQUV4RSxNQUFhLGVBQWdCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFFNUMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLGdCQUFnQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsa0NBQXNCLEVBQUUsQ0FBQyxDQUFBO1FBQ2hHLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSwyQ0FBK0IsRUFBRSxDQUFDLENBQUE7UUFDM0gsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUN0RyxNQUFNLG9DQUFvQyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsc0NBQXNDLEVBQUUsc0RBQTBDLEVBQUUsQ0FBQyxDQUFBO1FBQzVKLE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLDZCQUFpQixFQUFFLENBQUMsQ0FBQTtRQUNqRixNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSw4QkFBa0IsRUFBRSxDQUFDLENBQUE7UUFDcEYsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUMzRyxNQUFNLHNCQUFzQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsbUNBQXVCLEVBQUUsQ0FBQyxDQUFBO1FBQ3hHLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxzQkFBc0IsRUFBRSx1Q0FBMkIsRUFBRSxDQUFDLENBQUE7UUFHbkgseUVBQXlFO1FBQ3pFLHNDQUFzQztRQUN0Qyw0QkFBNEI7UUFDNUIsS0FBSztRQUVMLDhEQUE4RDtRQUM5RCxnQkFBZ0I7UUFDaEIsTUFBTTtRQUNOLE1BQU0sR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLDRDQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFHN0YsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdEQscURBQW9DLENBQUMsR0FBRyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzVFLDZDQUE0QixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUM3RCwrREFBOEMsQ0FBQyxHQUFHLEVBQUUsb0NBQW9DLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDaEcsc0NBQXFCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUM5QyxtQ0FBa0IsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzdDLDhDQUE2QixDQUFDLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNsRSw0Q0FBMkIsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDL0QseUNBQXdCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRWxFLENBQUM7Q0FDRjtBQXZDRCwwQ0F1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XHJcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcclxuaW1wb3J0IHsgVXNlclJlZ2lzdHJhdGlvbkxhbWJkYSwgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkxhbWJkYSwgV29ya3NNYW5FeHBlcmllbmNlTGFtYmRhLFxyXG4gICBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNMYW1iZGEsIEdldFRlc3RVc2VyTGFtYmRhLCBQb3N0VGVzdFVzZXJMYW1iZGEsIGdldEFsbE1vYmlsZU51bWJlckxhbWJkYSxcclxuICAgR2V0V29ya21hbkRldGFpbHNMYW1iZGEsIFxyXG4gICBVcGRhdGVXb3Jrc21hbkRldGFpbHNMYW1iZGF9IGZyb20gJy4vcmVzb3VyY2VzL2xhbWJkYS9hbGxMYW1iZGEnO1xyXG5pbXBvcnQgKiBhcyBzZm4gZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zXCI7XHJcbmltcG9ydCAqIGFzIHRhc2tzIGZyb20gXCJAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrc1wiO1xyXG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5IGZyb20gXCJAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheVwiXHJcbmltcG9ydCB7IEFwaWdhdGV3YXlEYXRhQ29uc3RhbnRzIH0gZnJvbSAnLi4vY29uc3RhbnRzL0FwaUdhdGV3YXlDb25zdGFudCc7XHJcbmltcG9ydCB7IFdvcmtzbWFuVGVybXNBbmRDb25kaXRpb25zQXBpR2F0ZXdheSwgUG9zdFVzZXJBcGlHYXRld2F5LCBnZXRBbGxNb2JpbGVOdW1iZXJzQXBpR2F0ZXdheSwgXHJcbiAgd29ya3NtYW5FeHBlcmllbmNlQXBpR2F0ZXdheSwgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzQXBpR2F0ZXdheSwgR2V0VGVzdFVzZXJBcGlHYXRld2F5LFxyXG4gIEdldFdvcmttYW5EZXRhaWxzQXBpR2F0ZXdheSwgXHJcbiAgVXBkYXRlV29ya3NtYW5EZXRhaWxzQXBpfSBmcm9tIFwiLi9yZXNvdXJjZXMvQXBpR2F0ZXdheS9BbGxBcGlHYXRlV2F5c1wiXHJcblxyXG5leHBvcnQgY2xhc3MgQ2RrRXhhbXBsZVN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcclxuICBwdWJsaWMgTWFjaGluZTogc2ZuLlN0YXRlTWFjaGluZTtcclxuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xyXG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XHJcblxyXG4gICAgY29uc3QgdXNlclJlZ2lzdHJhdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1VzZXJSZWdpc3RyYXRpb24nLCBVc2VyUmVnaXN0cmF0aW9uTGFtYmRhKCkpXHJcbiAgICBjb25zdCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbicsIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEoKSlcclxuICAgIGNvbnN0IFdvcmtzTWFuRXhwZXJpZW5jZSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvcmtzTWFuRXhwZXJpZW5jZScsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSgpKVxyXG4gICAgY29uc3QgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkdldFdvcmtzbWFuQWNjb3VudFJlZ2lzdGFydGlvblN0YXR1c1wiLCBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNMYW1iZGEoKSlcclxuICAgIGNvbnN0IEdldFRlc3RVc2VyID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkdldFRlc3RVc2VyXCIsIEdldFRlc3RVc2VyTGFtYmRhKCkpXHJcbiAgICBjb25zdCBQb3N0VGVzdFVzZXIgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiUG9zdFRlc3RVc2VyXCIsIFBvc3RUZXN0VXNlckxhbWJkYSgpKVxyXG4gICAgY29uc3QgZ2V0QWxsTW9iaWxlTnVtYmVyc0RlbW8gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiZ2V0QWxsTW9iaWxlTnVtYmVyXCIsIGdldEFsbE1vYmlsZU51bWJlckxhbWJkYSgpKVxyXG4gICAgY29uc3QgR2V0V29ya21hbkRldGFpbExhbWJkYSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJHZXRXb3JrbWFuRGV0YWlsc1wiLCBHZXRXb3JrbWFuRGV0YWlsc0xhbWJkYSgpKVxyXG4gICAgY29uc3QgVXBkYXRlV29ya3NtYW5EZXRhaWxMYW1iZGEgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiVXBkYXRlV29ya3NtYW5EZXRhaWxcIiwgVXBkYXRlV29ya3NtYW5EZXRhaWxzTGFtYmRhKCkpXHJcblxyXG5cclxuICAgIC8vIGNvbnN0IGRlZmluaXRpb24gPSBuZXcgdGFza3MuTGFtYmRhSW52b2tlKHRoaXMsICdVc2VyIFJlZ2lzdHJhdGlvbicsIHtcclxuICAgIC8vICAgbGFtYmRhRnVuY3Rpb246IHVzZXJSZWdpc3RyYXRpb24sXHJcbiAgICAvLyAgIG91dHB1dFBhdGg6IFwiJC5QYXlsb2FkXCJcclxuICAgIC8vIH0pXHJcblxyXG4gICAgLy8gdGhpcy5NYWNoaW5lID0gbmV3IHNmbi5TdGF0ZU1hY2hpbmUodGhpcywgXCJTdGF0ZU1hY2hpbmVcIiwge1xyXG4gICAgLy8gICBkZWZpbml0aW9uLFxyXG4gICAgLy8gfSk7XHJcbiAgICBjb25zdCBhcGkgPSBuZXcgYXBpZ2F0ZXdheS5SZXN0QXBpKHRoaXMsICdXb3Jrc01hbkFwaScsIEFwaWdhdGV3YXlEYXRhQ29uc3RhbnRzKGFwaWdhdGV3YXkpKTtcclxuXHJcblxyXG4gICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywgJ2FwaVVybCcsIHsgdmFsdWU6IGFwaS51cmwgfSk7XHJcblxyXG4gICAgV29ya3NtYW5UZXJtc0FuZENvbmRpdGlvbnNBcGlHYXRld2F5KGFwaSwgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbiwgJ1BPU1QnKVxyXG4gICAgd29ya3NtYW5FeHBlcmllbmNlQXBpR2F0ZXdheShhcGksIFdvcmtzTWFuRXhwZXJpZW5jZSwgJ1BPU1QnKVxyXG4gICAgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzQXBpR2F0ZXdheShhcGksIEdldFdvcmtzbWFuQWNjb3VudFJlZ2lzdGFydGlvblN0YXR1cywgJ0dFVCcpXHJcbiAgICBHZXRUZXN0VXNlckFwaUdhdGV3YXkoYXBpLCBHZXRUZXN0VXNlciwgJ0dFVCcpXHJcbiAgICBQb3N0VXNlckFwaUdhdGV3YXkoYXBpLCBQb3N0VGVzdFVzZXIsICdQT1NUJylcclxuICAgIGdldEFsbE1vYmlsZU51bWJlcnNBcGlHYXRld2F5KGFwaSwgZ2V0QWxsTW9iaWxlTnVtYmVyc0RlbW8sICdHRVQnKVxyXG4gICAgR2V0V29ya21hbkRldGFpbHNBcGlHYXRld2F5KGFwaSwgR2V0V29ya21hbkRldGFpbExhbWJkYSwgJ0dFVCcpXHJcbiAgICBVcGRhdGVXb3Jrc21hbkRldGFpbHNBcGkoYXBpLCBVcGRhdGVXb3Jrc21hbkRldGFpbExhbWJkYSwgJ1BVVCcpXHJcblxyXG4gIH1cclxufSJdfQ==