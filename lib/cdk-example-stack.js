"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const alllambda_1 = require("./resources/lambda/alllambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
const cognito = require("@aws-cdk/aws-cognito");
class CdkExampleStack extends cdk.Stack {
    // public readonly urlOutput: CfnOutput;
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', alllambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', alllambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', alllambda_1.WorksManExperienceLambda());
        const GetWorksmanAccountRegistartionStatus = new lambda.Function(this, "GetWorksmanAccountRegistartionStatus", alllambda_1.GetWorksmanAccountRegistartionStatusLambda());
        const getAllMobileNumbersDemo = new lambda.Function(this, "getAllMobileNumber", alllambda_1.getAllMobileNumberLambda());
        const GetWorkmanDetailLambda = new lambda.Function(this, "GetWorkmanDetails", alllambda_1.GetWorkmanDetailsLambda());
        const UpdateWorksmanDetailLambda = new lambda.Function(this, "UpdateWorksmanDetail", alllambda_1.UpdateWorksmanDetailsLambda());
        const UserPostCodeLambdaApi = new lambda.Function(this, "UserPostCodes", alllambda_1.UserPostCodesLambda());
        const GetAllPostcodesLambdaApi = new lambda.Function(this, "GetAllPostcodes", alllambda_1.GetAllPostcodesLambda());
        const DeletePostcodesLambdaApi = new lambda.Function(this, "DeletePostcodes", alllambda_1.DeletePostcodesLambda());
        const CreateWorksmanScheduleLambdaApi = new lambda.Function(this, "CreateWorksmanSchedule", alllambda_1.CreateWorksmanScheduleLambda());
        const DeleteWorkmanScheduleLambdaApi = new lambda.Function(this, "DeleteWorkmanSchedule", alllambda_1.DeleteWorkmanScheduleLambda());
        const GetWorksmanScheduleLambdaApi = new lambda.Function(this, "GetWorksmanSchedule", alllambda_1.GetWorksmanSchedulesLambda());
        const GetWorksmanjobsLambdaApi = new lambda.Function(this, "GetWorksmanjobs", alllambda_1.GetWorksmanjobsLambda());
        const WorksmanjobsCreateLambdaApi = new lambda.Function(this, "WorksmanjobsCreate", alllambda_1.WorksmanjobsCreateLambda());
        const CreateBankDetailsLambdaApi = new lambda.Function(this, "CreateBankDetails", alllambda_1.CreateBankDetailsLambda());
        const GetBankDetailsLambdaApi = new lambda.Function(this, "GetBankDetails", alllambda_1.GetBankDetailsLambda());
        const CreateMessagesLambdaApi = new lambda.Function(this, "CreateMessages", alllambda_1.CreateMessagesLambda());
        const GetMessagesLambdaApi = new lambda.Function(this, "GetMessages", alllambda_1.GetMessagesLambda());
        const CreateCustomerTableLambdaApi = new lambda.Function(this, "CreateCustomerTable", alllambda_1.CreateCustomerTableLambda());
        const CreateCustomerAddressLambdaApi = new lambda.Function(this, "CreateCustomerAddress", alllambda_1.CreateCustomerAddressLambda());
        const GetJobsLambdaApi = new lambda.Function(this, "GetJobs", alllambda_1.GetJobsLambda());
        const GetPaymentDetailsLambdaApi = new lambda.Function(this, "GetPaymentDetails", alllambda_1.GetPaymentDetailsLambda());
        const CreatePaymentHistoryDetailsLambdaApi = new lambda.Function(this, "CreatePaymentHistoryDetails", alllambda_1.CreatePaymentHistoryDetailsLambda());
        const GetPaymentHistoryDetailsLambdaApi = new lambda.Function(this, "GetPaymentHistoryDetails", alllambda_1.GetPaymentHistoryDetailsLambda());
        const GetDistrictWisePostCodesLambdaApi = new lambda.Function(this, "GetDistrictWisePostCodes", alllambda_1.GetDistrictWisePostCodesLambda());
        const UpdateBankDetailsLambdaApi = new lambda.Function(this, "UpdateBankDetails", alllambda_1.UpdateBankDetailsLambda());
        const api = new apigateway.RestApi(this, 'WorksmanApiData', ApiGatewayConstant_1.ApigatewayDataConstants(apigateway));
        const userPool = new cognito.UserPool(this, 'userpool', {
            userPoolName: `vk-clean-portal`,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            selfSignUpEnabled: true,
            signInAliases: { email: true, phone: true },
            autoVerify: { email: true },
            passwordPolicy: {
                minLength: 6,
                requireLowercase: true,
                requireDigits: true,
                requireUppercase: true,
                requireSymbols: true,
            },
            standardAttributes: {
                givenName: {
                    required: true,
                    mutable: true
                },
                familyName: {
                    required: true,
                    mutable: true
                },
                email: {
                    required: true,
                    mutable: true
                },
                address: {
                    required: true,
                    mutable: true
                },
                birthdate: {
                    required: true,
                    mutable: true
                },
                gender: {
                    required: true,
                    mutable: true
                },
                locale: {
                    required: true,
                    mutable: true
                },
                phoneNumber: {
                    required: true,
                    mutable: true
                },
            },
            accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,
        });
        const standardCognitoAttributes = {
            givenName: true,
            familyName: true,
            email: true,
            address: true,
            birthdate: true,
            gender: true,
            locale: true,
            phoneNumber: true,
        };
        const clientReadAttributes = new cognito.ClientAttributes()
            .withStandardAttributes(standardCognitoAttributes);
        const clientWriteAttributes = new cognito.ClientAttributes()
            .withStandardAttributes({
            ...standardCognitoAttributes,
            emailVerified: false,
            phoneNumberVerified: false,
        });
        const userPoolClient = new cognito.UserPoolClient(this, 'userpool-client', {
            userPool,
            authFlows: {
                adminUserPassword: true,
                custom: true,
                userSrp: true,
                userPassword: true
            },
            supportedIdentityProviders: [
                cognito.UserPoolClientIdentityProvider.COGNITO,
            ],
            readAttributes: clientReadAttributes,
            writeAttributes: clientWriteAttributes,
        });
        new cdk.CfnOutput(this, 'region', { value: cdk.Stack.of(this).region });
        new cdk.CfnOutput(this, 'userPoolId', { value: userPool.userPoolId });
        new cdk.CfnOutput(this, 'userPoolClientId', {
            value: userPoolClient.userPoolClientId,
        });
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        const auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'Authorizer', {
            cognitoUserPools: [userPool]
        });
        // POST APIS
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST', auth);
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST', auth);
        // PostUserApiGateway(api, PostTestUser, 'POST', auth)
        AllApiGateWays_1.createPostcodesApiGateway(api, UserPostCodeLambdaApi, 'POST', auth);
        AllApiGateWays_1.CreateWorksmanScheduleApiGateway(api, CreateWorksmanScheduleLambdaApi, 'POST', auth);
        AllApiGateWays_1.WorksmanjobsCreateApiGateway(api, WorksmanjobsCreateLambdaApi, 'POST', auth);
        AllApiGateWays_1.CreateBankDetailsApiGateway(api, CreateBankDetailsLambdaApi, 'POST', auth);
        AllApiGateWays_1.CreateMessagesApiGateway(api, CreateMessagesLambdaApi, 'POST', auth);
        // CreateCustomerTableApiGateway(api, CreateCustomerTableLambdaApi, 'POST', auth)
        // CreateCustomerAddressApiGateway(api, CreateCustomerTableLambdaApi, 'POST', auth)
        // // CreatePaymentHistoryDetailsApiGateway(api, CreateCustomerTableLambdaApi, 'POST', auth)
        // // GET APIS
        AllApiGateWays_1.GetWorksmanAccountRegistartionStatusApiGateway(api, GetWorksmanAccountRegistartionStatus, 'GET', auth);
        // GetTestUserApiGateway(api, GetTestUser, 'GET', auth)
        AllApiGateWays_1.getAllMobileNumbersApiGateway(api, getAllMobileNumbersDemo, 'GET');
        AllApiGateWays_1.GetWorkmanDetailsApiGateway(api, GetWorkmanDetailLambda, 'GET', auth);
        AllApiGateWays_1.GetAllPostcodesApiGateway(api, GetAllPostcodesLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetWorksmanScheduleApiGateway(api, GetWorksmanScheduleLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetWorksmanjobsApiGateway(api, GetWorksmanjobsLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetBankDetailsApiGateway(api, GetBankDetailsLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetMessagesApiGateway(api, GetMessagesLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetJobsApiGateway(api, GetJobsLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetPaymentDetailsApiGateway(api, GetPaymentDetailsLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetPaymentHistoryDetailsApiGateway(api, GetPaymentHistoryDetailsLambdaApi, 'GET', auth);
        AllApiGateWays_1.GetDistrictWisePostCodesApiGateway(api, GetDistrictWisePostCodesLambdaApi, 'GET', auth);
        // // DELETE APIS
        AllApiGateWays_1.DeletePostcodesApiGateway(api, DeletePostcodesLambdaApi, 'DELETE', auth);
        AllApiGateWays_1.DeleteWorkmanScheduleApiGateway(api, DeleteWorkmanScheduleLambdaApi, 'DELETE', auth);
        // // UPDATE APIS
        // UpdateWorksmanDetailsApiGateway(api, UpdateWorksmanDetailLambda, 'PUT', auth)
        AllApiGateWays_1.UpdateBankDetailsApiGateway(api, UpdateBankDetailsLambdaApi, 'PUT', auth);
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQXlCc0M7QUFFdEMsc0RBQXFEO0FBQ3JELHdFQUEwRTtBQUMxRSwwRUF5QitDO0FBQy9DLGdEQUFnRDtBQUVoRCxNQUFhLGVBQWdCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFFNUMsd0NBQXdDO0lBQ3hDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDbEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLGtDQUFzQixFQUFFLENBQUMsQ0FBQTtRQUNoRyxNQUFNLHlCQUF5QixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsMkNBQStCLEVBQUUsQ0FBQyxDQUFBO1FBQzNILE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRSxvQ0FBd0IsRUFBRSxDQUFDLENBQUE7UUFDdEcsTUFBTSxvQ0FBb0MsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLHNDQUFzQyxFQUFFLHNEQUEwQyxFQUFFLENBQUMsQ0FBQTtRQUM1SixNQUFNLHVCQUF1QixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsb0NBQXdCLEVBQUUsQ0FBQyxDQUFBO1FBQzNHLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxtQ0FBdUIsRUFBRSxDQUFDLENB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QTJCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUN6RSxtREFBa0MsQ0FBQyxHQUFHLEVBQUUsaUNBQWlDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3ZGLG1EQUFrQyxDQUFDLEdBQUcsRUFBRSxpQ0FBaUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFFdkYsaUJBQWlCO1FBQ2pCLDBDQUF5QixDQUFDLEdBQUcsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDeEUsZ0RBQStCLENBQUMsR0FBRyxFQUFFLDhCQUE4QixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUVwRixpQkFBaUI7UUFDakIsZ0ZBQWdGO1FBQ2hGLDRDQUEyQixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFFM0UsQ0FBQztDQUNGO0FBckxELDBDQXFMQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcclxuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQge1xyXG4gIFVzZXJSZWdpc3RyYXRpb25MYW1iZGEsIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSxcclxuICBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNMYW1iZGEsIGdldEFsbE1vYmlsZU51bWJlckxhbWJkYSxcclxuICBHZXRXb3JrbWFuRGV0YWlsc0xhbWJkYSxcclxuICBVcGRhdGVXb3Jrc21hbkRldGFpbHNMYW1iZGEsXHJcbiAgVXNlclBvc3RDb2Rlc0xhbWJkYSxcclxuICBHZXRBbGxQb3N0Y29kZXNMYW1iZGEsXHJcbiAgRGVsZXRlUG9zdGNvZGVzTGFtYmRhLFxyXG4gIENyZWF0ZVdvcmtzbWFuU2NoZWR1bGVMYW1iZGEsXHJcbiAgRGVsZXRlV29ya21hblNjaGVkdWxlTGFtYmRhLFxyXG4gIEdldFdvcmtzbWFuU2NoZWR1bGVzTGFtYmRhLFxyXG4gIEdldFdvcmtzbWFuam9ic0xhbWJkYSxcclxuICBXb3Jrc21hbmpvYnNDcmVhdGVMYW1iZGEsXHJcbiAgR2V0TWVzc2FnZXNMYW1iZGEsXHJcbiAgQ3JlYXRlTWVzc2FnZXNMYW1iZGEsXHJcbiAgQ3JlYXRlQmFua0RldGFpbHNMYW1iZGEsXHJcbiAgR2V0QmFua0RldGFpbHNMYW1iZGEsXHJcbiAgQ3JlYXRlQ3VzdG9tZXJUYWJsZUxhbWJkYSxcclxuICBDcmVhdGVDdXN0b21lckFkZHJlc3NMYW1iZGEsXHJcbiAgR2V0Sm9ic0xhbWJkYSxcclxuICBHZXRQYXltZW50RGV0YWlsc0xhbWJkYSxcclxuICBDcmVhdGVQYXltZW50SGlzdG9yeURldGFpbHNMYW1iZGEsXHJcbiAgR2V0UGF5bWVudEhpc3RvcnlEZXRhaWxzTGFtYmRhLFxyXG4gIEdldERpc3RyaWN0V2lzZVBvc3RDb2Rlc0xhbWJkYSxcclxuICBVcGRhdGVCYW5rRGV0YWlsc0xhbWJkYVxyXG59IGZyb20gJy4vcmVzb3VyY2VzL2xhbWJkYS9hbGxsYW1iZGEnO1xyXG5pbXBvcnQgKiBhcyBzZm4gZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zXCI7XHJcbmltcG9ydCAqIGFzIGFwaWdhdGV3YXkgZnJvbSBcIkBhd3MtY2RrL2F3cy1hcGlnYXRld2F5XCJcclxuaW1wb3J0IHsgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMvQXBpR2F0ZXdheUNvbnN0YW50JztcclxuaW1wb3J0IHtcclxuICBXb3Jrc21hblRlcm1zQW5kQ29uZGl0aW9uc0FwaUdhdGV3YXksIGdldEFsbE1vYmlsZU51bWJlcnNBcGlHYXRld2F5LFxyXG4gIHdvcmtzbWFuRXhwZXJpZW5jZUFwaUdhdGV3YXksIEdldFdvcmtzbWFuQWNjb3VudFJlZ2lzdGFydGlvblN0YXR1c0FwaUdhdGV3YXksXHJcbiAgR2V0V29ya21hbkRldGFpbHNBcGlHYXRld2F5LFxyXG4gIFVwZGF0ZVdvcmtzbWFuRGV0YWlsc0FwaUdhdGV3YXksXHJcbiAgY3JlYXRlUG9zdGNvZGVzQXBpR2F0ZXdheSxcclxuICBHZXRBbGxQb3N0Y29kZXNBcGlHYXRld2F5LFxyXG4gIERlbGV0ZVBvc3Rjb2Rlc0FwaUdhdGV3YXksXHJcbiAgQ3JlYXRlV29ya3NtYW5TY2hlZHVsZUFwaUdhdGV3YXksXHJcbiAgRGVsZXRlV29ya21hblNjaGVkdWxlQXBpR2F0ZXdheSxcclxuICBHZXRXb3Jrc21hblNjaGVkdWxlQXBpR2F0ZXdheSxcclxuICBHZXRXb3Jrc21hbmpvYnNBcGlHYXRld2F5LFxyXG4gIFdvcmtzbWFuam9ic0NyZWF0ZUFwaUdhdGV3YXksXHJcbiAgR2V0TWVzc2FnZXNBcGlHYXRld2F5LFxyXG4gIENyZWF0ZU1lc3NhZ2VzQXBpR2F0ZXdheSxcclxuICBDcmVhdGVCYW5rRGV0YWlsc0FwaUdhdGV3YXksXHJcbiAgR2V0QmFua0RldGFpbHNBcGlHYXRld2F5LFxyXG4gIENyZWF0ZUN1c3RvbWVyVGFibGVBcGlHYXRld2F5LFxyXG4gIENyZWF0ZUN1c3RvbWVyQWRkcmVzc0FwaUdhdGV3YXksXHJcbiAgR2V0Sm9ic0FwaUdhdGV3YXksXHJcbiAgR2V0UGF5bWVudERldGFpbHNBcGlHYXRld2F5LFxyXG4gIENyZWF0ZVBheW1lbnRIaXN0b3J5RGV0YWlsc0FwaUdhdGV3YXksXHJcbiAgR2V0UGF5bWVudEhpc3RvcnlEZXRhaWxzQXBpR2F0ZXdheSxcclxuICBHZXREaXN0cmljdFdpc2VQb3N0Q29kZXNBcGlHYXRld2F5LFxyXG4gIFVwZGF0ZUJhbmtEZXRhaWxzQXBpR2F0ZXdheVxyXG59IGZyb20gXCIuL3Jlc291cmNlcy9BcGlHYXRld2F5L0FsbEFwaUdhdGVXYXlzXCI7XHJcbmltcG9ydCAqIGFzIGNvZ25pdG8gZnJvbSAnQGF3cy1jZGsvYXdzLWNvZ25pdG8nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENka0V4YW1wbGVTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XHJcbiAgcHVibGljIE1hY2hpbmU6IHNmbi5TdGF0ZU1hY2hpbmU7XHJcbiAgLy8gcHVibGljIHJlYWRvbmx5IHVybE91dHB1dDogQ2ZuT3V0cHV0O1xyXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XHJcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcclxuXHJcbiAgICBjb25zdCB1c2VyUmVnaXN0cmF0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnVXNlclJlZ2lzdHJhdGlvbicsIFVzZXJSZWdpc3RyYXRpb25MYW1iZGEoKSlcclxuICAgIGNvbnN0IFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uJywgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkxhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NNYW5FeHBlcmllbmNlID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnV29ya3NNYW5FeHBlcmllbmNlJywgV29ya3NNYW5FeHBlcmllbmNlTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXMgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzXCIsIEdldFdvcmtzbWFuQWNjb3VudFJlZ2lzdGFydGlvblN0YXR1c0xhbWJkYSgpKVxyXG4gICAgY29uc3QgZ2V0QWxsTW9iaWxlTnVtYmVyc0RlbW8gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiZ2V0QWxsTW9iaWxlTnVtYmVyXCIsIGdldEFsbE1vYmlsZU51bWJlckxhbWJkYSgpKVxyXG4gICAgY29uc3QgR2V0V29ya21hbkRldGFpbExhbWJkYSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJHZXRXb3JrbWFuRGV0YWlsc1wiLCBHZXRXb3JrbWFuRGV0YWlsc0xhbWJkYSgpKVxyXG4gICAgY29uc3QgVXBkYXRlV29ya3NtYW5EZXRhaWxMYW1iZGEgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiVXBkYXRlV29ya3NtYW5EZXRhaWxcIiwgVXBkYXRlV29ya3NtYW5EZXRhaWxzTGFtYmRhKCkpXHJcbiAgICBjb25zdCBVc2VyUG9zdENvZGVMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiVXNlclBvc3RDb2Rlc1wiLCBVc2VyUG9zdENvZGVzTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXRBbGxQb3N0Y29kZXNMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiR2V0QWxsUG9zdGNvZGVzXCIsIEdldEFsbFBvc3Rjb2Rlc0xhbWJkYSgpKVxyXG4gICAgY29uc3QgRGVsZXRlUG9zdGNvZGVzTGFtYmRhQXBpID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkRlbGV0ZVBvc3Rjb2Rlc1wiLCBEZWxldGVQb3N0Y29kZXNMYW1iZGEoKSlcclxuICAgIGNvbnN0IENyZWF0ZVdvcmtzbWFuU2NoZWR1bGVMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiQ3JlYXRlV29ya3NtYW5TY2hlZHVsZVwiLCBDcmVhdGVXb3Jrc21hblNjaGVkdWxlTGFtYmRhKCkpXHJcbiAgICBjb25zdCBEZWxldGVXb3JrbWFuU2NoZWR1bGVMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiRGVsZXRlV29ya21hblNjaGVkdWxlXCIsIERlbGV0ZVdvcmttYW5TY2hlZHVsZUxhbWJkYSgpKVxyXG4gICAgY29uc3QgR2V0V29ya3NtYW5TY2hlZHVsZUxhbWJkYUFwaSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJHZXRXb3Jrc21hblNjaGVkdWxlXCIsIEdldFdvcmtzbWFuU2NoZWR1bGVzTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXRXb3Jrc21hbmpvYnNMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiR2V0V29ya3NtYW5qb2JzXCIsIEdldFdvcmtzbWFuam9ic0xhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NtYW5qb2JzQ3JlYXRlTGFtYmRhQXBpID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIldvcmtzbWFuam9ic0NyZWF0ZVwiLCBXb3Jrc21hbmpvYnNDcmVhdGVMYW1iZGEoKSlcclxuICAgIGNvbnN0IENyZWF0ZUJhbmtEZXRhaWxzTGFtYmRhQXBpID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkNyZWF0ZUJhbmtEZXRhaWxzXCIsIENyZWF0ZUJhbmtEZXRhaWxzTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXRCYW5rRGV0YWlsc0xhbWJkYUFwaSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJHZXRCYW5rRGV0YWlsc1wiLCBHZXRCYW5rRGV0YWlsc0xhbWJkYSgpKVxyXG4gICAgY29uc3QgQ3JlYXRlTWVzc2FnZXNMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiQ3JlYXRlTWVzc2FnZXNcIiwgQ3JlYXRlTWVzc2FnZXNMYW1iZGEoKSlcclxuICAgIGNvbnN0IEdldE1lc3NhZ2VzTGFtYmRhQXBpID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkdldE1lc3NhZ2VzXCIsIEdldE1lc3NhZ2VzTGFtYmRhKCkpXHJcbiAgICBjb25zdCBDcmVhdGVDdXN0b21lclRhYmxlTGFtYmRhQXBpID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkNyZWF0ZUN1c3RvbWVyVGFibGVcIiwgQ3JlYXRlQ3VzdG9tZXJUYWJsZUxhbWJkYSgpKVxyXG4gICAgY29uc3QgQ3JlYXRlQ3VzdG9tZXJBZGRyZXNzTGFtYmRhQXBpID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkNyZWF0ZUN1c3RvbWVyQWRkcmVzc1wiLCBDcmVhdGVDdXN0b21lckFkZHJlc3NMYW1iZGEoKSlcclxuICAgIGNvbnN0IEdldEpvYnNMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiR2V0Sm9ic1wiLCBHZXRKb2JzTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXRQYXltZW50RGV0YWlsc0xhbWJkYUFwaSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJHZXRQYXltZW50RGV0YWlsc1wiLCBHZXRQYXltZW50RGV0YWlsc0xhbWJkYSgpKVxyXG4gICAgY29uc3QgQ3JlYXRlUGF5bWVudEhpc3RvcnlEZXRhaWxzTGFtYmRhQXBpID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkNyZWF0ZVBheW1lbnRIaXN0b3J5RGV0YWlsc1wiLCBDcmVhdGVQYXltZW50SGlzdG9yeURldGFpbHNMYW1iZGEoKSlcclxuICAgIGNvbnN0IEdldFBheW1lbnRIaXN0b3J5RGV0YWlsc0xhbWJkYUFwaSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJHZXRQYXltZW50SGlzdG9yeURldGFpbHNcIiwgR2V0UGF5bWVudEhpc3RvcnlEZXRhaWxzTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXREaXN0cmljdFdpc2VQb3N0Q29kZXNMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiR2V0RGlzdHJpY3RXaXNlUG9zdENvZGVzXCIsIEdldERpc3RyaWN0V2lzZVBvc3RDb2Rlc0xhbWJkYSgpKVxyXG4gICAgY29uc3QgVXBkYXRlQmFua0RldGFpbHNMYW1iZGFBcGkgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiVXBkYXRlQmFua0RldGFpbHNcIiwgVXBkYXRlQmFua0RldGFpbHNMYW1iZGEoKSlcclxuXHJcblxyXG4gICAgY29uc3QgYXBpID0gbmV3IGFwaWdhdGV3YXkuUmVzdEFwaSh0aGlzLCAnV29ya3NtYW5BcGlEYXRhJywgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMoYXBpZ2F0ZXdheSkpO1xyXG5cclxuICAgIGNvbnN0IHVzZXJQb29sID0gbmV3IGNvZ25pdG8uVXNlclBvb2wodGhpcywgJ3VzZXJwb29sJywge1xyXG4gICAgICB1c2VyUG9vbE5hbWU6IGB2ay1jbGVhbi1wb3J0YWxgLFxyXG4gICAgICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxyXG4gICAgICBzZWxmU2lnblVwRW5hYmxlZDogdHJ1ZSxcclxuICAgICAgc2lnbkluQWxpYXNlczogeyBlbWFpbDogdHJ1ZSwgcGhvbmU6IHRydWUgfSxcclxuICAgICAgYXV0b1ZlcmlmeTogeyBlbWFpbDogdHJ1ZSB9LFxyXG4gICAgICBwYXNzd29yZFBvbGljeToge1xyXG4gICAgICAgIG1pbkxlbmd0aDogNixcclxuICAgICAgICByZXF1aXJlTG93ZXJjYXNlOiB0cnVlLFxyXG4gICAgICAgIHJlcXVpcmVEaWdpdHM6IHRydWUsXHJcbiAgICAgICAgcmVxdWlyZVVwcGVyY2FzZTogdHJ1ZSxcclxuICAgICAgICByZXF1aXJlU3ltYm9sczogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgc3RhbmRhcmRBdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgZ2l2ZW5OYW1lOiB7XHJcbiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICAgIG11dGFibGU6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhbWlseU5hbWU6IHtcclxuICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgbXV0YWJsZTogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW1haWw6IHtcclxuICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgbXV0YWJsZTogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWRkcmVzczoge1xyXG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICBtdXRhYmxlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBiaXJ0aGRhdGU6IHtcclxuICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgbXV0YWJsZTogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2VuZGVyOiB7XHJcbiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICAgIG11dGFibGU6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvY2FsZToge1xyXG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICBtdXRhYmxlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwaG9uZU51bWJlcjoge1xyXG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICBtdXRhYmxlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgYWNjb3VudFJlY292ZXJ5OiBjb2duaXRvLkFjY291bnRSZWNvdmVyeS5FTUFJTF9PTkxZLFxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHN0YW5kYXJkQ29nbml0b0F0dHJpYnV0ZXMgPSB7XHJcbiAgICAgIGdpdmVuTmFtZTogdHJ1ZSxcclxuICAgICAgZmFtaWx5TmFtZTogdHJ1ZSxcclxuICAgICAgZW1haWw6IHRydWUsXHJcbiAgICAgIGFkZHJlc3M6IHRydWUsXHJcbiAgICAgIGJpcnRoZGF0ZTogdHJ1ZSxcclxuICAgICAgZ2VuZGVyOiB0cnVlLFxyXG4gICAgICBsb2NhbGU6IHRydWUsXHJcbiAgICAgIHBob25lTnVtYmVyOiB0cnVlLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjbGllbnRSZWFkQXR0cmlidXRlcyA9IG5ldyBjb2duaXRvLkNsaWVudEF0dHJpYnV0ZXMoKVxyXG4gICAgICAud2l0aFN0YW5kYXJkQXR0cmlidXRlcyhzdGFuZGFyZENvZ25pdG9BdHRyaWJ1dGVzKVxyXG5cclxuICAgIGNvbnN0IGNsaWVudFdyaXRlQXR0cmlidXRlcyA9IG5ldyBjb2duaXRvLkNsaWVudEF0dHJpYnV0ZXMoKVxyXG4gICAgICAud2l0aFN0YW5kYXJkQXR0cmlidXRlcyh7XHJcbiAgICAgICAgLi4uc3RhbmRhcmRDb2duaXRvQXR0cmlidXRlcyxcclxuICAgICAgICBlbWFpbFZlcmlmaWVkOiBmYWxzZSxcclxuICAgICAgICBwaG9uZU51bWJlclZlcmlmaWVkOiBmYWxzZSxcclxuICAgICAgfSlcclxuXHJcblxyXG5cclxuICAgIGNvbnN0IHVzZXJQb29sQ2xpZW50ID0gbmV3IGNvZ25pdG8uVXNlclBvb2xDbGllbnQodGhpcywgJ3VzZXJwb29sLWNsaWVudCcsIHtcclxuICAgICAgdXNlclBvb2wsXHJcbiAgICAgIGF1dGhGbG93czoge1xyXG4gICAgICAgIGFkbWluVXNlclBhc3N3b3JkOiB0cnVlLFxyXG4gICAgICAgIGN1c3RvbTogdHJ1ZSxcclxuICAgICAgICB1c2VyU3JwOiB0cnVlLFxyXG4gICAgICAgIHVzZXJQYXNzd29yZDogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzdXBwb3J0ZWRJZGVudGl0eVByb3ZpZGVyczogW1xyXG4gICAgICAgIGNvZ25pdG8uVXNlclBvb2xDbGllbnRJZGVudGl0eVByb3ZpZGVyLkNPR05JVE8sXHJcbiAgICAgIF0sXHJcbiAgICAgIHJlYWRBdHRyaWJ1dGVzOiBjbGllbnRSZWFkQXR0cmlidXRlcyxcclxuICAgICAgd3JpdGVBdHRyaWJ1dGVzOiBjbGllbnRXcml0ZUF0dHJpYnV0ZXMsXHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdyZWdpb24nLCB7IHZhbHVlOiBjZGsuU3RhY2sub2YodGhpcykucmVnaW9uIH0pO1xyXG4gICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywgJ3VzZXJQb29sSWQnLCB7IHZhbHVlOiB1c2VyUG9vbC51c2VyUG9vbElkIH0pO1xyXG4gICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywgJ3VzZXJQb29sQ2xpZW50SWQnLCB7XHJcbiAgICAgIHZhbHVlOiB1c2VyUG9vbENsaWVudC51c2VyUG9vbENsaWVudElkLFxyXG4gICAgfSk7XHJcblxyXG4gICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywgJ2FwaVVybCcsIHsgdmFsdWU6IGFwaS51cmwgfSk7XHJcblxyXG5cclxuXHJcbiAgICBjb25zdCBhdXRoID0gbmV3IGFwaWdhdGV3YXkuQ29nbml0b1VzZXJQb29sc0F1dGhvcml6ZXIodGhpcywgJ0F1dGhvcml6ZXInLCB7XHJcbiAgICAgIGNvZ25pdG9Vc2VyUG9vbHM6IFt1c2VyUG9vbF1cclxuICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgLy8gUE9TVCBBUElTXHJcbiAgICBXb3Jrc21hblRlcm1zQW5kQ29uZGl0aW9uc0FwaUdhdGV3YXkoYXBpLCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uLCAnUE9TVCcsIGF1dGgpXHJcbiAgICB3b3Jrc21hbkV4cGVyaWVuY2VBcGlHYXRld2F5KGFwaSwgV29ya3NNYW5FeHBlcmllbmNlLCAnUE9TVCcsIGF1dGgpXHJcbiAgICAvLyBQb3N0VXNlckFwaUdhdGV3YXkoYXBpLCBQb3N0VGVzdFVzZXIsICdQT1NUJywgYXV0aClcclxuICAgIGNyZWF0ZVBvc3Rjb2Rlc0FwaUdhdGV3YXkoYXBpLCBVc2VyUG9zdENvZGVMYW1iZGFBcGksICdQT1NUJywgYXV0aClcclxuICAgIENyZWF0ZVdvcmtzbWFuU2NoZWR1bGVBcGlHYXRld2F5KGFwaSwgQ3JlYXRlV29ya3NtYW5TY2hlZHVsZUxhbWJkYUFwaSwgJ1BPU1QnLCBhdXRoKVxyXG4gICAgV29ya3NtYW5qb2JzQ3JlYXRlQXBpR2F0ZXdheShhcGksIFdvcmtzbWFuam9ic0NyZWF0ZUxhbWJkYUFwaSwgJ1BPU1QnLCBhdXRoKVxyXG4gICAgQ3JlYXRlQmFua0RldGFpbHNBcGlHYXRld2F5KGFwaSwgQ3JlYXRlQmFua0RldGFpbHNMYW1iZGFBcGksICdQT1NUJywgYXV0aClcclxuICAgIENyZWF0ZU1lc3NhZ2VzQXBpR2F0ZXdheShhcGksIENyZWF0ZU1lc3NhZ2VzTGFtYmRhQXBpLCAnUE9TVCcsIGF1dGgpXHJcbiAgICAvLyBDcmVhdGVDdXN0b21lclRhYmxlQXBpR2F0ZXdheShhcGksIENyZWF0ZUN1c3RvbWVyVGFibGVMYW1iZGFBcGksICdQT1NUJywgYXV0aClcclxuICAgIC8vIENyZWF0ZUN1c3RvbWVyQWRkcmVzc0FwaUdhdGV3YXkoYXBpLCBDcmVhdGVDdXN0b21lclRhYmxlTGFtYmRhQXBpLCAnUE9TVCcsIGF1dGgpXHJcbiAgICAvLyAvLyBDcmVhdGVQYXltZW50SGlzdG9yeURldGFpbHNBcGlHYXRld2F5KGFwaSwgQ3JlYXRlQ3VzdG9tZXJUYWJsZUxhbWJkYUFwaSwgJ1BPU1QnLCBhdXRoKVxyXG5cclxuICAgIC8vIC8vIEdFVCBBUElTXHJcbiAgICBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNBcGlHYXRld2F5KGFwaSwgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzLCAnR0VUJywgYXV0aClcclxuICAgIC8vIEdldFRlc3RVc2VyQXBpR2F0ZXdheShhcGksIEdldFRlc3RVc2VyLCAnR0VUJywgYXV0aClcclxuICAgIGdldEFsbE1vYmlsZU51bWJlcnNBcGlHYXRld2F5KGFwaSwgZ2V0QWxsTW9iaWxlTnVtYmVyc0RlbW8sICdHRVQnKVxyXG4gICAgR2V0V29ya21hbkRldGFpbHNBcGlHYXRld2F5KGFwaSwgR2V0V29ya21hbkRldGFpbExhbWJkYSwgJ0dFVCcsIGF1dGgpXHJcbiAgICBHZXRBbGxQb3N0Y29kZXNBcGlHYXRld2F5KGFwaSwgR2V0QWxsUG9zdGNvZGVzTGFtYmRhQXBpLCAnR0VUJywgYXV0aClcclxuICAgIEdldFdvcmtzbWFuU2NoZWR1bGVBcGlHYXRld2F5KGFwaSwgR2V0V29ya3NtYW5TY2hlZHVsZUxhbWJkYUFwaSwgJ0dFVCcsIGF1dGgpXHJcbiAgICBHZXRXb3Jrc21hbmpvYnNBcGlHYXRld2F5KGFwaSwgR2V0V29ya3NtYW5qb2JzTGFtYmRhQXBpLCAnR0VUJywgYXV0aClcclxuICAgIEdldEJhbmtEZXRhaWxzQXBpR2F0ZXdheShhcGksIEdldEJhbmtEZXRhaWxzTGFtYmRhQXBpLCAnR0VUJywgYXV0aClcclxuICAgIEdldE1lc3NhZ2VzQXBpR2F0ZXdheShhcGksIEdldE1lc3NhZ2VzTGFtYmRhQXBpLCAnR0VUJywgYXV0aClcclxuICAgIEdldEpvYnNBcGlHYXRld2F5KGFwaSwgR2V0Sm9ic0xhbWJkYUFwaSwgJ0dFVCcsIGF1dGgpXHJcbiAgICBHZXRQYXltZW50RGV0YWlsc0FwaUdhdGV3YXkoYXBpLCBHZXRQYXltZW50RGV0YWlsc0xhbWJkYUFwaSwgJ0dFVCcsIGF1dGgpXHJcbiAgICBHZXRQYXltZW50SGlzdG9yeURldGFpbHNBcGlHYXRld2F5KGFwaSwgR2V0UGF5bWVudEhpc3RvcnlEZXRhaWxzTGFtYmRhQXBpLCAnR0VUJywgYXV0aClcclxuICAgIEdldERpc3RyaWN0V2lzZVBvc3RDb2Rlc0FwaUdhdGV3YXkoYXBpLCBHZXREaXN0cmljdFdpc2VQb3N0Q29kZXNMYW1iZGFBcGksICdHRVQnLCBhdXRoKVxyXG5cclxuICAgIC8vIC8vIERFTEVURSBBUElTXHJcbiAgICBEZWxldGVQb3N0Y29kZXNBcGlHYXRld2F5KGFwaSwgRGVsZXRlUG9zdGNvZGVzTGFtYmRhQXBpLCAnREVMRVRFJywgYXV0aClcclxuICAgIERlbGV0ZVdvcmttYW5TY2hlZHVsZUFwaUdhdGV3YXkoYXBpLCBEZWxldGVXb3JrbWFuU2NoZWR1bGVMYW1iZGFBcGksICdERUxFVEUnLCBhdXRoKVxyXG5cclxuICAgIC8vIC8vIFVQREFURSBBUElTXHJcbiAgICAvLyBVcGRhdGVXb3Jrc21hbkRldGFpbHNBcGlHYXRld2F5KGFwaSwgVXBkYXRlV29ya3NtYW5EZXRhaWxMYW1iZGEsICdQVVQnLCBhdXRoKVxyXG4gICAgVXBkYXRlQmFua0RldGFpbHNBcGlHYXRld2F5KGFwaSwgVXBkYXRlQmFua0RldGFpbHNMYW1iZGFBcGksICdQVVQnLCBhdXRoKVxyXG5cclxuICB9XHJcbn0iXX0=