"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
// import * as ec2 from '@aws-cdk/aws-ec2';
// import * as rds from '@aws-cdk/aws-rds';
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const UserEmailConfirm = new lambda.Function(this, 'UserEmailConfirm', allLambda_1.userEmailConfirm());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const WorksmanEligibility = new lambda.Function(this, 'WorksmanEligibility', allLambda_1.WorksmanEligibilityLambda());
        // const definition = new tasks.LambdaInvoke(this, 'User Registration', {
        //   lambdaFunction: userRegistration,
        //   outputPath: "$.Payload"
        // })
        //   .next(
        //     new tasks.LambdaInvoke(this, "User Email Confirm", {
        //       lambdaFunction: UserEmailConfirm,
        //       outputPath: "$.Payload",
        //     })
        //   );
        // this.Machine = new sfn.StateMachine(this, "StateMachine", {
        //   definition,
        // });
        const api = new apigateway.RestApi(this, 'api', ApiGatewayConstant_1.ApigatewayDataConstants());
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        const worksmanTermsAndCond = api.root.addResource('workmanDataStore');
        worksmanTermsAndCond.addMethod('POST', new apigateway.LambdaIntegration(WorksManTermsAndCondition));
        const getcustomer = api.root.addResource('getcustomer');
        // ðŸ‘‡ integrate GET /todos with getTodosLambda
        getcustomer.addMethod('GET', new apigateway.LambdaIntegration(UserEmailConfirm));
        const WorksManExperienceApi = api.root.addResource('WorksManExperience');
        WorksManExperienceApi.addMethod('POST', new apigateway.LambdaIntegration(WorksManExperience));
        const WorksmanEligibilityApi = api.root.addResource('WorksmanEligibility');
        WorksmanEligibilityApi.addMethod('POST', new apigateway.LambdaIntegration(WorksmanEligibility));
        // const api = new apigateway.RestApi(this, 'UserRegistrationApi', ApigatewayDataConstants());
        // ðŸ‘‡ add a /todos resource
        // const getcustomer = api.root.addResource('getcustomer');
        // ðŸ‘‡ integrate GET /todos with getTodosLambda
        // getcustomer.addMethod('GET', new apigateway.LambdaIntegration(UserEmailConfirm));
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsMkNBQTJDO0FBQzNDLDJDQUEyQztBQUMzQyw4Q0FBOEM7QUFDOUMsNERBQThLO0FBRzlLLHNEQUFxRDtBQUNyRCx3RUFBb0c7QUFFcEcsTUFBYSxlQUFnQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBRTVDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDbEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLGtDQUFzQixFQUFFLENBQUMsQ0FBQTtRQUNoRyxNQUFNLGdCQUFnQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsNEJBQWdCLEVBQUUsQ0FBQyxDQUFBO1FBQzFGLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBQywyQkFBMkIsRUFBQywyQ0FBK0IsRUFBRSxDQUFDLENBQUE7UUFDekgsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFDLG9CQUFvQixFQUFDLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUNwRyxNQUFNLG1CQUFtQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMscUJBQXFCLEVBQUMscUNBQXlCLEVBQUUsQ0FBQyxDQUFBO1FBRXZHLHlFQUF5RTtRQUN6RSxzQ0FBc0M7UUFDdEMsNEJBQTRCO1FBQzVCLEtBQUs7UUFDTCxXQUFXO1FBQ1gsMkRBQTJEO1FBQzNELDBDQUEwQztRQUMxQyxpQ0FBaUM7UUFDakMsU0FBUztRQUNULE9BQU87UUFFUCw4REFBOEQ7UUFDOUQsZ0JBQWdCO1FBQ2hCLE1BQU07UUFJTixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSw0Q0FBdUIsRUFBRSxDQUFDLENBQUM7UUFFM0UsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdEQsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ3JFLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxVQUFVLENBQUMsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsQ0FBRSxDQUFBO1FBR25HLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3pELDhDQUE4QztRQUM5QyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFHakYsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3pFLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUMsSUFBSSxVQUFVLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFBO1FBRTVGLE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUMzRSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFDLElBQUksVUFBVSxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQTtRQUc5Riw4RkFBOEY7UUFJOUYsMkJBQTJCO1FBQzNCLDJEQUEyRDtRQUUzRCw4Q0FBOEM7UUFDOUMsb0ZBQW9GO0lBT3RGLENBQUM7Q0FDRjtBQWhFRCwwQ0FnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XHJcbi8vIGltcG9ydCAqIGFzIGVjMiBmcm9tICdAYXdzLWNkay9hd3MtZWMyJztcclxuLy8gaW1wb3J0ICogYXMgcmRzIGZyb20gJ0Bhd3MtY2RrL2F3cy1yZHMnO1xyXG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnQGF3cy1jZGsvYXdzLWxhbWJkYSc7XHJcbmltcG9ydCB7IFVzZXJSZWdpc3RyYXRpb25MYW1iZGEsIHVzZXJFbWFpbENvbmZpcm0sIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSwgV29ya3NtYW5FbGlnaWJpbGl0eUxhbWJkYSB9IGZyb20gJy4vcmVzb3VyY2VzL2xhbWJkYS9hbGxMYW1iZGEnO1xyXG5pbXBvcnQgKiBhcyBzZm4gZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zXCI7XHJcbmltcG9ydCAqIGFzIHRhc2tzIGZyb20gXCJAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrc1wiO1xyXG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5IGZyb20gXCJAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheVwiXHJcbmltcG9ydCB7IEFwaWdhdGV3YXlEYXRhQ29uc3RhbnRzLCBBcGlHYXRlV2F5UmVzcG9uc2VNZXRob2QgfSBmcm9tICcuLi9jb25zdGFudHMvQXBpR2F0ZXdheUNvbnN0YW50JztcclxuXHJcbmV4cG9ydCBjbGFzcyBDZGtFeGFtcGxlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xyXG4gIHB1YmxpYyBNYWNoaW5lOiBzZm4uU3RhdGVNYWNoaW5lO1xyXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XHJcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcclxuXHJcbiAgICBjb25zdCB1c2VyUmVnaXN0cmF0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnVXNlclJlZ2lzdHJhdGlvbicsIFVzZXJSZWdpc3RyYXRpb25MYW1iZGEoKSlcclxuICAgIGNvbnN0IFVzZXJFbWFpbENvbmZpcm0gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdVc2VyRW1haWxDb25maXJtJywgdXNlckVtYWlsQ29uZmlybSgpKVxyXG4gICAgY29uc3QgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywnV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbicsV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkxhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NNYW5FeHBlcmllbmNlID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCdXb3Jrc01hbkV4cGVyaWVuY2UnLFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NtYW5FbGlnaWJpbGl0eSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywnV29ya3NtYW5FbGlnaWJpbGl0eScsV29ya3NtYW5FbGlnaWJpbGl0eUxhbWJkYSgpKVxyXG5cclxuICAgIC8vIGNvbnN0IGRlZmluaXRpb24gPSBuZXcgdGFza3MuTGFtYmRhSW52b2tlKHRoaXMsICdVc2VyIFJlZ2lzdHJhdGlvbicsIHtcclxuICAgIC8vICAgbGFtYmRhRnVuY3Rpb246IHVzZXJSZWdpc3RyYXRpb24sXHJcbiAgICAvLyAgIG91dHB1dFBhdGg6IFwiJC5QYXlsb2FkXCJcclxuICAgIC8vIH0pXHJcbiAgICAvLyAgIC5uZXh0KFxyXG4gICAgLy8gICAgIG5ldyB0YXNrcy5MYW1iZGFJbnZva2UodGhpcywgXCJVc2VyIEVtYWlsIENvbmZpcm1cIiwge1xyXG4gICAgLy8gICAgICAgbGFtYmRhRnVuY3Rpb246IFVzZXJFbWFpbENvbmZpcm0sXHJcbiAgICAvLyAgICAgICBvdXRwdXRQYXRoOiBcIiQuUGF5bG9hZFwiLFxyXG4gICAgLy8gICAgIH0pXHJcbiAgICAvLyAgICk7XHJcblxyXG4gICAgLy8gdGhpcy5NYWNoaW5lID0gbmV3IHNmbi5TdGF0ZU1hY2hpbmUodGhpcywgXCJTdGF0ZU1hY2hpbmVcIiwge1xyXG4gICAgLy8gICBkZWZpbml0aW9uLFxyXG4gICAgLy8gfSk7XHJcblxyXG4gICAgIFxyXG5cclxuICAgIGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LlJlc3RBcGkodGhpcywgJ2FwaScsIEFwaWdhdGV3YXlEYXRhQ29uc3RhbnRzKCkpO1xyXG5cclxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdhcGlVcmwnLCB7IHZhbHVlOiBhcGkudXJsIH0pO1xyXG5cclxuICAgIGNvbnN0IHdvcmtzbWFuVGVybXNBbmRDb25kID0gYXBpLnJvb3QuYWRkUmVzb3VyY2UoJ3dvcmttYW5EYXRhU3RvcmUnKVxyXG4gICAgd29ya3NtYW5UZXJtc0FuZENvbmQuYWRkTWV0aG9kKCdQT1NUJywgbmV3IGFwaWdhdGV3YXkuTGFtYmRhSW50ZWdyYXRpb24oV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbikgKVxyXG5cclxuXHJcbiAgICAgY29uc3QgZ2V0Y3VzdG9tZXIgPSBhcGkucm9vdC5hZGRSZXNvdXJjZSgnZ2V0Y3VzdG9tZXInKTtcclxuICAgIC8vIPCfkYcgaW50ZWdyYXRlIEdFVCAvdG9kb3Mgd2l0aCBnZXRUb2Rvc0xhbWJkYVxyXG4gICAgZ2V0Y3VzdG9tZXIuYWRkTWV0aG9kKCdHRVQnLCBuZXcgYXBpZ2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbihVc2VyRW1haWxDb25maXJtKSk7XHJcblxyXG5cclxuICAgIGNvbnN0IFdvcmtzTWFuRXhwZXJpZW5jZUFwaSA9IGFwaS5yb290LmFkZFJlc291cmNlKCdXb3Jrc01hbkV4cGVyaWVuY2UnKTtcclxuICAgIFdvcmtzTWFuRXhwZXJpZW5jZUFwaS5hZGRNZXRob2QoJ1BPU1QnLG5ldyBhcGlnYXRld2F5LkxhbWJkYUludGVncmF0aW9uKFdvcmtzTWFuRXhwZXJpZW5jZSkpXHJcblxyXG4gICAgY29uc3QgV29ya3NtYW5FbGlnaWJpbGl0eUFwaSA9IGFwaS5yb290LmFkZFJlc291cmNlKCdXb3Jrc21hbkVsaWdpYmlsaXR5Jyk7XHJcbiAgICBXb3Jrc21hbkVsaWdpYmlsaXR5QXBpLmFkZE1ldGhvZCgnUE9TVCcsbmV3IGFwaWdhdGV3YXkuTGFtYmRhSW50ZWdyYXRpb24oV29ya3NtYW5FbGlnaWJpbGl0eSkpXHJcblxyXG5cclxuICAgIC8vIGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LlJlc3RBcGkodGhpcywgJ1VzZXJSZWdpc3RyYXRpb25BcGknLCBBcGlnYXRld2F5RGF0YUNvbnN0YW50cygpKTtcclxuXHJcbiAgIFxyXG5cclxuICAgIC8vIPCfkYcgYWRkIGEgL3RvZG9zIHJlc291cmNlXHJcbiAgICAvLyBjb25zdCBnZXRjdXN0b21lciA9IGFwaS5yb290LmFkZFJlc291cmNlKCdnZXRjdXN0b21lcicpO1xyXG5cclxuICAgIC8vIPCfkYcgaW50ZWdyYXRlIEdFVCAvdG9kb3Mgd2l0aCBnZXRUb2Rvc0xhbWJkYVxyXG4gICAgLy8gZ2V0Y3VzdG9tZXIuYWRkTWV0aG9kKCdHRVQnLCBuZXcgYXBpZ2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbihVc2VyRW1haWxDb25maXJtKSk7XHJcblxyXG5cclxuXHJcbiAgICAgIFxyXG5cclxuICAgICAgXHJcbiAgfVxyXG59Il19