"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const GetWorksmanAccountRegistartionStatus = new lambda.Function(this, "GetWorksmanAccountRegistartionStatus", allLambda_1.GetWorksmanAccountRegistartionStatusLambda());
        const GetTestUser = new lambda.Function(this, "GetTestUser", allLambda_1.GetTestUserLambda());
        const PostTestUser = new lambda.Function(this, "PostTestUser", allLambda_1.PostTestUserLambda());
        const getAllMobileNumbersDemo = new lambda.Function(this, "getAllMobileNumber", allLambda_1.getAllMobileNumberLambda());
        // const definition = new tasks.LambdaInvoke(this, 'User Registration', {
        //   lambdaFunction: userRegistration,
        //   outputPath: "$.Payload"
        // })
        // this.Machine = new sfn.StateMachine(this, "StateMachine", {
        //   definition,
        // });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants(apigateway));
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
        AllApiGateWays_1.GetWorksmanAccountRegistartionStatusApiGateway(api, GetWorksmanAccountRegistartionStatus, 'GET');
        // GetTestUserApiGateway(api,GetTestUser, 'GET')
        // PostUserApiGateway(api,PostTestUser, 'POST')
        AllApiGateWays_1.getAllMobileNumbereApiGateway(api, getAllMobileNumbersDemo, 'GET');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUE4TztBQUc5TyxzREFBcUQ7QUFDckQsd0VBQTBFO0FBQzFFLDBFQUFvUDtBQUVwUCxNQUFhLGVBQWdCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFFNUMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLGdCQUFnQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsa0NBQXNCLEVBQUUsQ0FBQyxDQUFBO1FBQ2hHLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSwyQ0FBK0IsRUFBRSxDQUFDLENBQUE7UUFDM0gsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUN0RyxNQUFNLG9DQUFvQyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsc0NBQXNDLEVBQUMsc0RBQTBDLEVBQUUsQ0FBQyxDQUFBO1FBQzFKLE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsYUFBYSxFQUFDLDZCQUFpQixFQUFFLENBQUMsQ0FBQTtRQUMvRSxNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFDLGNBQWMsRUFBQyw4QkFBa0IsRUFBRSxDQUFDLENBQUE7UUFDbEYsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFDLG9CQUFvQixFQUFDLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUd6Ryx5RUFBeUU7UUFDekUsc0NBQXNDO1FBQ3RDLDRCQUE0QjtRQUM1QixLQUFLO1FBRUwsOERBQThEO1FBQzlELGdCQUFnQjtRQUNoQixNQUFNO1FBQ04sTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsNENBQXVCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUc3RixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV0RCxxREFBb0MsQ0FBQyxHQUFHLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDNUUsNkNBQTRCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzdELCtEQUE4QyxDQUFDLEdBQUcsRUFBQyxvQ0FBb0MsRUFBQyxLQUFLLENBQUMsQ0FBQTtRQUM5RixnREFBZ0Q7UUFDaEQsK0NBQStDO1FBQy9DLDhDQUE2QixDQUFDLEdBQUcsRUFBQyx1QkFBdUIsRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUVuRSxDQUFDO0NBQ0Y7QUFuQ0QsMENBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnQGF3cy1jZGsvYXdzLWxhbWJkYSc7XHJcbmltcG9ydCB7IFVzZXJSZWdpc3RyYXRpb25MYW1iZGEsIFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb25MYW1iZGEsIFdvcmtzTWFuRXhwZXJpZW5jZUxhbWJkYSwgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzTGFtYmRhLCBHZXRUZXN0VXNlckxhbWJkYSwgUG9zdFRlc3RVc2VyTGFtYmRhLCBnZXRBbGxNb2JpbGVOdW1iZXJMYW1iZGEgfSBmcm9tICcuL3Jlc291cmNlcy9sYW1iZGEvYWxsTGFtYmRhJztcclxuaW1wb3J0ICogYXMgc2ZuIGZyb20gXCJAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9uc1wiO1xyXG5pbXBvcnQgKiBhcyB0YXNrcyBmcm9tIFwiQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnMtdGFza3NcIjtcclxuaW1wb3J0ICogYXMgYXBpZ2F0ZXdheSBmcm9tIFwiQGF3cy1jZGsvYXdzLWFwaWdhdGV3YXlcIlxyXG5pbXBvcnQgeyBBcGlnYXRld2F5RGF0YUNvbnN0YW50cyB9IGZyb20gJy4uL2NvbnN0YW50cy9BcGlHYXRld2F5Q29uc3RhbnQnO1xyXG5pbXBvcnQgeyBnZXRBbGxNb2JpbGVOdW1iZXJlQXBpR2F0ZXdheSwgR2V0VGVzdFVzZXJBcGlHYXRld2F5LCBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNBcGlHYXRld2F5LCBQb3N0VXNlckFwaUdhdGV3YXksIHdvcmtzbWFuRXhwZXJpZW5jZUFwaUdhdGV3YXksIFdvcmtzbWFuVGVybXNBbmRDb25kaXRpb25zQXBpR2F0ZXdheSB9IGZyb20gXCIuL3Jlc291cmNlcy9BcGlHYXRld2F5L0FsbEFwaUdhdGVXYXlzXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBDZGtFeGFtcGxlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xyXG4gIHB1YmxpYyBNYWNoaW5lOiBzZm4uU3RhdGVNYWNoaW5lO1xyXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XHJcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcclxuXHJcbiAgICBjb25zdCB1c2VyUmVnaXN0cmF0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnVXNlclJlZ2lzdHJhdGlvbicsIFVzZXJSZWdpc3RyYXRpb25MYW1iZGEoKSlcclxuICAgIGNvbnN0IFdvcmtzTWFuVGVybXNBbmRDb25kaXRpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uJywgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkxhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NNYW5FeHBlcmllbmNlID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnV29ya3NNYW5FeHBlcmllbmNlJywgV29ya3NNYW5FeHBlcmllbmNlTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXMgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsXCJHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNcIixHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNMYW1iZGEoKSlcclxuICAgIGNvbnN0IEdldFRlc3RVc2VyID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLFwiR2V0VGVzdFVzZXJcIixHZXRUZXN0VXNlckxhbWJkYSgpKVxyXG4gICAgY29uc3QgUG9zdFRlc3RVc2VyID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLFwiUG9zdFRlc3RVc2VyXCIsUG9zdFRlc3RVc2VyTGFtYmRhKCkpXHJcbiAgICBjb25zdCBnZXRBbGxNb2JpbGVOdW1iZXJzRGVtbyA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcyxcImdldEFsbE1vYmlsZU51bWJlclwiLGdldEFsbE1vYmlsZU51bWJlckxhbWJkYSgpKVxyXG5cclxuICAgIFxyXG4gICAgLy8gY29uc3QgZGVmaW5pdGlvbiA9IG5ldyB0YXNrcy5MYW1iZGFJbnZva2UodGhpcywgJ1VzZXIgUmVnaXN0cmF0aW9uJywge1xyXG4gICAgLy8gICBsYW1iZGFGdW5jdGlvbjogdXNlclJlZ2lzdHJhdGlvbixcclxuICAgIC8vICAgb3V0cHV0UGF0aDogXCIkLlBheWxvYWRcIlxyXG4gICAgLy8gfSlcclxuXHJcbiAgICAvLyB0aGlzLk1hY2hpbmUgPSBuZXcgc2ZuLlN0YXRlTWFjaGluZSh0aGlzLCBcIlN0YXRlTWFjaGluZVwiLCB7XHJcbiAgICAvLyAgIGRlZmluaXRpb24sXHJcbiAgICAvLyB9KTtcclxuICAgIGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LlJlc3RBcGkodGhpcywgJ1dvcmtzTWFuQXBpJywgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMoYXBpZ2F0ZXdheSkpO1xyXG4gICAgXHJcblxyXG4gICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywgJ2FwaVVybCcsIHsgdmFsdWU6IGFwaS51cmwgfSk7XHJcblxyXG4gICAgV29ya3NtYW5UZXJtc0FuZENvbmRpdGlvbnNBcGlHYXRld2F5KGFwaSwgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbiwgJ1BPU1QnKVxyXG4gICAgd29ya3NtYW5FeHBlcmllbmNlQXBpR2F0ZXdheShhcGksIFdvcmtzTWFuRXhwZXJpZW5jZSwgJ1BPU1QnKVxyXG4gICAgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzQXBpR2F0ZXdheShhcGksR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzLCdHRVQnKVxyXG4gICAgLy8gR2V0VGVzdFVzZXJBcGlHYXRld2F5KGFwaSxHZXRUZXN0VXNlciwgJ0dFVCcpXHJcbiAgICAvLyBQb3N0VXNlckFwaUdhdGV3YXkoYXBpLFBvc3RUZXN0VXNlciwgJ1BPU1QnKVxyXG4gICAgZ2V0QWxsTW9iaWxlTnVtYmVyZUFwaUdhdGV3YXkoYXBpLGdldEFsbE1vYmlsZU51bWJlcnNEZW1vLCAnR0VUJylcclxuICBcclxuICB9XHJcbn0iXX0=