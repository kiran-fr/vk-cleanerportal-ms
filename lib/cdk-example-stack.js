"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const GetWorksmanAccountRegistartionStatus = new lambda.Function(this, "GetWorksmanAccountRegistartionStatus", allLambda_1.GetWorksmanAccountRegistartionStatusLambda());
        const GetTestUser = new lambda.Function(this, "GetTestUser", allLambda_1.GetTestUserLambda());
        const PostTestUser = new lambda.Function(this, "PostTestUser", allLambda_1.PostTestUserLambda());
        // const definition = new tasks.LambdaInvoke(this, 'User Registration', {
        //   lambdaFunction: userRegistration,
        //   outputPath: "$.Payload"
        // })
        // this.Machine = new sfn.StateMachine(this, "StateMachine", {
        //   definition,
        // });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants(apigateway));
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
        AllApiGateWays_1.GetWorksmanAccountRegistartionStatusApiGateway(api, GetWorksmanAccountRegistartionStatus, 'POST');
        AllApiGateWays_1.GetTestUserApiGateway(api, GetTestUser, 'GET');
        AllApiGateWays_1.PostUserApiGateway(api, PostTestUser, 'POST');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUFvTjtBQUdwTixzREFBcUQ7QUFDckQsd0VBQTBFO0FBQzFFLDBFQUFxTjtBQUVyTixNQUFhLGVBQWdCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFFNUMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLGdCQUFnQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsa0NBQXNCLEVBQUUsQ0FBQyxDQUFBO1FBQ2hHLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSwyQ0FBK0IsRUFBRSxDQUFDLENBQUE7UUFDM0gsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUN0RyxNQUFNLG9DQUFvQyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsc0NBQXNDLEVBQUMsc0RBQTBDLEVBQUUsQ0FBQyxDQUFBO1FBQzFKLE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsYUFBYSxFQUFDLDZCQUFpQixFQUFFLENBQUMsQ0FBQTtRQUMvRSxNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFDLGNBQWMsRUFBQyw4QkFBa0IsRUFBRSxDQUFDLENBQUE7UUFHbEYseUVBQXlFO1FBQ3pFLHNDQUFzQztRQUN0Qyw0QkFBNEI7UUFDNUIsS0FBSztRQUVMLDhEQUE4RDtRQUM5RCxnQkFBZ0I7UUFDaEIsTUFBTTtRQUNOLE1BQU0sR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLDRDQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFHN0YsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdEQscURBQW9DLENBQUMsR0FBRyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzVFLDZDQUE0QixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUM3RCwrREFBOEMsQ0FBQyxHQUFHLEVBQUMsb0NBQW9DLEVBQUMsTUFBTSxDQUFDLENBQUE7UUFDL0Ysc0NBQXFCLENBQUMsR0FBRyxFQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUM3QyxtQ0FBa0IsQ0FBQyxHQUFHLEVBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBRTlDLENBQUM7Q0FDRjtBQWpDRCwwQ0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnQGF3cy1jZGsvYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBVc2VyUmVnaXN0cmF0aW9uTGFtYmRhLCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uTGFtYmRhLCBXb3Jrc01hbkV4cGVyaWVuY2VMYW1iZGEsIEdldFdvcmtzbWFuQWNjb3VudFJlZ2lzdGFydGlvblN0YXR1c0xhbWJkYSwgR2V0VGVzdFVzZXJMYW1iZGEsIFBvc3RUZXN0VXNlckxhbWJkYSB9IGZyb20gJy4vcmVzb3VyY2VzL2xhbWJkYS9hbGxMYW1iZGEnO1xuaW1wb3J0ICogYXMgc2ZuIGZyb20gXCJAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9uc1wiO1xuaW1wb3J0ICogYXMgdGFza3MgZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzXCI7XG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5IGZyb20gXCJAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheVwiXG5pbXBvcnQgeyBBcGlnYXRld2F5RGF0YUNvbnN0YW50cyB9IGZyb20gJy4uL2NvbnN0YW50cy9BcGlHYXRld2F5Q29uc3RhbnQnO1xuaW1wb3J0IHsgR2V0VGVzdFVzZXJBcGlHYXRld2F5LCBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNBcGlHYXRld2F5LCBQb3N0VXNlckFwaUdhdGV3YXksIHdvcmtzbWFuRXhwZXJpZW5jZUFwaUdhdGV3YXksIFdvcmtzbWFuVGVybXNBbmRDb25kaXRpb25zQXBpR2F0ZXdheSB9IGZyb20gXCIuL3Jlc291cmNlcy9BcGlHYXRld2F5L0FsbEFwaUdhdGVXYXlzXCJcblxuZXhwb3J0IGNsYXNzIENka0V4YW1wbGVTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIHB1YmxpYyBNYWNoaW5lOiBzZm4uU3RhdGVNYWNoaW5lO1xuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgdXNlclJlZ2lzdHJhdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1VzZXJSZWdpc3RyYXRpb24nLCBVc2VyUmVnaXN0cmF0aW9uTGFtYmRhKCkpXG4gICAgY29uc3QgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvcmtzTWFuVGVybXNBbmRDb25kaXRpb24nLCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uTGFtYmRhKCkpXG4gICAgY29uc3QgV29ya3NNYW5FeHBlcmllbmNlID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnV29ya3NNYW5FeHBlcmllbmNlJywgV29ya3NNYW5FeHBlcmllbmNlTGFtYmRhKCkpXG4gICAgY29uc3QgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLFwiR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzXCIsR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzTGFtYmRhKCkpXG4gICAgY29uc3QgR2V0VGVzdFVzZXIgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsXCJHZXRUZXN0VXNlclwiLEdldFRlc3RVc2VyTGFtYmRhKCkpXG4gICAgY29uc3QgUG9zdFRlc3RVc2VyID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLFwiUG9zdFRlc3RVc2VyXCIsUG9zdFRlc3RVc2VyTGFtYmRhKCkpXG5cbiAgICBcbiAgICAvLyBjb25zdCBkZWZpbml0aW9uID0gbmV3IHRhc2tzLkxhbWJkYUludm9rZSh0aGlzLCAnVXNlciBSZWdpc3RyYXRpb24nLCB7XG4gICAgLy8gICBsYW1iZGFGdW5jdGlvbjogdXNlclJlZ2lzdHJhdGlvbixcbiAgICAvLyAgIG91dHB1dFBhdGg6IFwiJC5QYXlsb2FkXCJcbiAgICAvLyB9KVxuXG4gICAgLy8gdGhpcy5NYWNoaW5lID0gbmV3IHNmbi5TdGF0ZU1hY2hpbmUodGhpcywgXCJTdGF0ZU1hY2hpbmVcIiwge1xuICAgIC8vICAgZGVmaW5pdGlvbixcbiAgICAvLyB9KTtcbiAgICBjb25zdCBhcGkgPSBuZXcgYXBpZ2F0ZXdheS5SZXN0QXBpKHRoaXMsICdXb3Jrc01hbkFwaScsIEFwaWdhdGV3YXlEYXRhQ29uc3RhbnRzKGFwaWdhdGV3YXkpKTtcbiAgICBcblxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdhcGlVcmwnLCB7IHZhbHVlOiBhcGkudXJsIH0pO1xuXG4gICAgV29ya3NtYW5UZXJtc0FuZENvbmRpdGlvbnNBcGlHYXRld2F5KGFwaSwgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbiwgJ1BPU1QnKVxuICAgIHdvcmtzbWFuRXhwZXJpZW5jZUFwaUdhdGV3YXkoYXBpLCBXb3Jrc01hbkV4cGVyaWVuY2UsICdQT1NUJylcbiAgICBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNBcGlHYXRld2F5KGFwaSxHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXMsJ1BPU1QnKVxuICAgIEdldFRlc3RVc2VyQXBpR2F0ZXdheShhcGksR2V0VGVzdFVzZXIsICdHRVQnKVxuICAgIFBvc3RVc2VyQXBpR2F0ZXdheShhcGksUG9zdFRlc3RVc2VyLCAnUE9TVCcpXG4gIFxuICB9XG59Il19