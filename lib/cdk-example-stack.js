"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkExampleStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const allLambda_1 = require("./resources/lambda/allLambda");
const apigateway = require("@aws-cdk/aws-apigateway");
const ApiGatewayConstant_1 = require("../constants/ApiGatewayConstant");
const AllApiGateWays_1 = require("./resources/ApiGateway/AllApiGateWays");
class CdkExampleStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const userRegistration = new lambda.Function(this, 'UserRegistration', allLambda_1.UserRegistrationLambda());
        const WorksManTermsAndCondition = new lambda.Function(this, 'WorksManTermsAndCondition', allLambda_1.WorksManTermsAndConditionLambda());
        const WorksManExperience = new lambda.Function(this, 'WorksManExperience', allLambda_1.WorksManExperienceLambda());
        const GetWorksmanAccountRegistartionStatus = new lambda.Function(this, "GetWorksmanAccountRegistartionStatus", allLambda_1.GetWorksmanAccountRegistartionStatusLambda());
        const GetTestUser = new lambda.Function(this, "GetTestUser", allLambda_1.GetTestUserLambda());
        const PostTestUser = new lambda.Function(this, "PostTestUser", allLambda_1.PostTestUserLambda());
        const getAllMobileNumbersDemo = new lambda.Function(this, "getAllMobileNumber", allLambda_1.getAllMobileNumberLambda());
        // const definition = new tasks.LambdaInvoke(this, 'User Registration', {
        //   lambdaFunction: userRegistration,
        //   outputPath: "$.Payload"
        // })
        // this.Machine = new sfn.StateMachine(this, "StateMachine", {
        //   definition,
        // });
        const api = new apigateway.RestApi(this, 'WorksManApi', ApiGatewayConstant_1.ApigatewayDataConstants(apigateway));
        new cdk.CfnOutput(this, 'apiUrl', { value: api.url });
        AllApiGateWays_1.WorksmanTermsAndConditionsApiGateway(api, WorksManTermsAndCondition, 'POST');
        AllApiGateWays_1.worksmanExperienceApiGateway(api, WorksManExperience, 'POST');
        AllApiGateWays_1.GetWorksmanAccountRegistartionStatusApiGateway(api, GetWorksmanAccountRegistartionStatus, 'GET');
        AllApiGateWays_1.GetTestUserApiGateway(api, GetTestUser, 'GET');
        AllApiGateWays_1.PostUserApiGateway(api, PostTestUser, 'POST');
        AllApiGateWays_1.getAllMobileNumbereApiGateway(api, getAllMobileNumbersDemo, 'GET');
    }
}
exports.CdkExampleStack = CdkExampleStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWV4YW1wbGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZGstZXhhbXBsZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDREQUE4TztBQUc5TyxzREFBcUQ7QUFDckQsd0VBQTBFO0FBQzFFLDBFQUFvUDtBQUVwUCxNQUFhLGVBQWdCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFFNUMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLGdCQUFnQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsa0NBQXNCLEVBQUUsQ0FBQyxDQUFBO1FBQ2hHLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSwyQ0FBK0IsRUFBRSxDQUFDLENBQUE7UUFDM0gsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUN0RyxNQUFNLG9DQUFvQyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsc0NBQXNDLEVBQUUsc0RBQTBDLEVBQUUsQ0FBQyxDQUFBO1FBQzVKLE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLDZCQUFpQixFQUFFLENBQUMsQ0FBQTtRQUNqRixNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSw4QkFBa0IsRUFBRSxDQUFDLENBQUE7UUFDcEYsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLG9DQUF3QixFQUFFLENBQUMsQ0FBQTtRQUczRyx5RUFBeUU7UUFDekUsc0NBQXNDO1FBQ3RDLDRCQUE0QjtRQUM1QixLQUFLO1FBRUwsOERBQThEO1FBQzlELGdCQUFnQjtRQUNoQixNQUFNO1FBQ04sTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsNENBQXVCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUc3RixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV0RCxxREFBb0MsQ0FBQyxHQUFHLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDNUUsNkNBQTRCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzdELCtEQUE4QyxDQUFDLEdBQUcsRUFBRSxvQ0FBb0MsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNoRyxzQ0FBcUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzlDLG1DQUFrQixDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDN0MsOENBQTZCLENBQUMsR0FBRyxFQUFFLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRXBFLENBQUM7Q0FDRjtBQW5DRCwwQ0FtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XHJcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcclxuaW1wb3J0IHsgVXNlclJlZ2lzdHJhdGlvbkxhbWJkYSwgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbkxhbWJkYSwgV29ya3NNYW5FeHBlcmllbmNlTGFtYmRhLCBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNMYW1iZGEsIEdldFRlc3RVc2VyTGFtYmRhLCBQb3N0VGVzdFVzZXJMYW1iZGEsIGdldEFsbE1vYmlsZU51bWJlckxhbWJkYSB9IGZyb20gJy4vcmVzb3VyY2VzL2xhbWJkYS9hbGxMYW1iZGEnO1xyXG5pbXBvcnQgKiBhcyBzZm4gZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zXCI7XHJcbmltcG9ydCAqIGFzIHRhc2tzIGZyb20gXCJAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrc1wiO1xyXG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5IGZyb20gXCJAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheVwiXHJcbmltcG9ydCB7IEFwaWdhdGV3YXlEYXRhQ29uc3RhbnRzIH0gZnJvbSAnLi4vY29uc3RhbnRzL0FwaUdhdGV3YXlDb25zdGFudCc7XHJcbmltcG9ydCB7IFdvcmtzbWFuVGVybXNBbmRDb25kaXRpb25zQXBpR2F0ZXdheSwgUG9zdFVzZXJBcGlHYXRld2F5LCBnZXRBbGxNb2JpbGVOdW1iZXJlQXBpR2F0ZXdheSwgd29ya3NtYW5FeHBlcmllbmNlQXBpR2F0ZXdheSwgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzQXBpR2F0ZXdheSwgR2V0VGVzdFVzZXJBcGlHYXRld2F5IH0gZnJvbSBcIi4vcmVzb3VyY2VzL0FwaUdhdGV3YXkvQWxsQXBpR2F0ZVdheXNcIlxyXG5cclxuZXhwb3J0IGNsYXNzIENka0V4YW1wbGVTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XHJcbiAgcHVibGljIE1hY2hpbmU6IHNmbi5TdGF0ZU1hY2hpbmU7XHJcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcclxuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgIGNvbnN0IHVzZXJSZWdpc3RyYXRpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdVc2VyUmVnaXN0cmF0aW9uJywgVXNlclJlZ2lzdHJhdGlvbkxhbWJkYSgpKVxyXG4gICAgY29uc3QgV29ya3NNYW5UZXJtc0FuZENvbmRpdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1dvcmtzTWFuVGVybXNBbmRDb25kaXRpb24nLCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uTGFtYmRhKCkpXHJcbiAgICBjb25zdCBXb3Jrc01hbkV4cGVyaWVuY2UgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdXb3Jrc01hbkV4cGVyaWVuY2UnLCBXb3Jrc01hbkV4cGVyaWVuY2VMYW1iZGEoKSlcclxuICAgIGNvbnN0IEdldFdvcmtzbWFuQWNjb3VudFJlZ2lzdGFydGlvblN0YXR1cyA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNcIiwgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzTGFtYmRhKCkpXHJcbiAgICBjb25zdCBHZXRUZXN0VXNlciA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJHZXRUZXN0VXNlclwiLCBHZXRUZXN0VXNlckxhbWJkYSgpKVxyXG4gICAgY29uc3QgUG9zdFRlc3RVc2VyID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIlBvc3RUZXN0VXNlclwiLCBQb3N0VGVzdFVzZXJMYW1iZGEoKSlcclxuICAgIGNvbnN0IGdldEFsbE1vYmlsZU51bWJlcnNEZW1vID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcImdldEFsbE1vYmlsZU51bWJlclwiLCBnZXRBbGxNb2JpbGVOdW1iZXJMYW1iZGEoKSlcclxuXHJcblxyXG4gICAgLy8gY29uc3QgZGVmaW5pdGlvbiA9IG5ldyB0YXNrcy5MYW1iZGFJbnZva2UodGhpcywgJ1VzZXIgUmVnaXN0cmF0aW9uJywge1xyXG4gICAgLy8gICBsYW1iZGFGdW5jdGlvbjogdXNlclJlZ2lzdHJhdGlvbixcclxuICAgIC8vICAgb3V0cHV0UGF0aDogXCIkLlBheWxvYWRcIlxyXG4gICAgLy8gfSlcclxuXHJcbiAgICAvLyB0aGlzLk1hY2hpbmUgPSBuZXcgc2ZuLlN0YXRlTWFjaGluZSh0aGlzLCBcIlN0YXRlTWFjaGluZVwiLCB7XHJcbiAgICAvLyAgIGRlZmluaXRpb24sXHJcbiAgICAvLyB9KTtcclxuICAgIGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LlJlc3RBcGkodGhpcywgJ1dvcmtzTWFuQXBpJywgQXBpZ2F0ZXdheURhdGFDb25zdGFudHMoYXBpZ2F0ZXdheSkpO1xyXG5cclxuXHJcbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnYXBpVXJsJywgeyB2YWx1ZTogYXBpLnVybCB9KTtcclxuXHJcbiAgICBXb3Jrc21hblRlcm1zQW5kQ29uZGl0aW9uc0FwaUdhdGV3YXkoYXBpLCBXb3Jrc01hblRlcm1zQW5kQ29uZGl0aW9uLCAnUE9TVCcpXHJcbiAgICB3b3Jrc21hbkV4cGVyaWVuY2VBcGlHYXRld2F5KGFwaSwgV29ya3NNYW5FeHBlcmllbmNlLCAnUE9TVCcpXHJcbiAgICBHZXRXb3Jrc21hbkFjY291bnRSZWdpc3RhcnRpb25TdGF0dXNBcGlHYXRld2F5KGFwaSwgR2V0V29ya3NtYW5BY2NvdW50UmVnaXN0YXJ0aW9uU3RhdHVzLCAnR0VUJylcclxuICAgIEdldFRlc3RVc2VyQXBpR2F0ZXdheShhcGksIEdldFRlc3RVc2VyLCAnR0VUJylcclxuICAgIFBvc3RVc2VyQXBpR2F0ZXdheShhcGksIFBvc3RUZXN0VXNlciwgJ1BPU1QnKVxyXG4gICAgZ2V0QWxsTW9iaWxlTnVtYmVyZUFwaUdhdGV3YXkoYXBpLCBnZXRBbGxNb2JpbGVOdW1iZXJzRGVtbywgJ0dFVCcpXHJcblxyXG4gIH1cclxufSJdfQ==